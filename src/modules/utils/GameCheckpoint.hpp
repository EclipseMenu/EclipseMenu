#pragma once
#include "modules/utils/SingletonCache.hpp"
#include <Geode/binding/PlayerObject.hpp>

using namespace geode::prelude;

namespace eclipse::utils {
    class FixPlayLayerCheckpoint {
        public:
        FixPlayLayerCheckpoint() = default;

        FixPlayLayerCheckpoint(PlayLayer* playLayer) {
            //GJBaseGameLayer
            m_playbackMode = playLayer->m_playbackMode;
            m_lowDetailMode = playLayer->m_lowDetailMode;
            m_extraLDM = playLayer->m_extraLDM;
            m_ignoreDamage = playLayer->m_ignoreDamage;
            m_enable22Changes = playLayer->m_enable22Changes;
            m_allowStaticRotate = playLayer->m_allowStaticRotate;
            m_fixNegativeScale = playLayer->m_fixNegativeScale;
            m_startingFromBeginning = playLayer->m_startingFromBeginning;
            m_hoverNode = playLayer->m_hoverNode;
            m_areaTransformNode = playLayer->m_areaTransformNode;
            m_areaSkewNode = playLayer->m_areaSkewNode;
            m_areaScaleNode = playLayer->m_areaScaleNode;
            m_areaRotateNode = playLayer->m_areaRotateNode;
            m_areaTransformNode2 = playLayer->m_areaTransformNode2;
            m_obb2 = playLayer->m_obb2;
            m_particleBlendingLayerB0 = playLayer->m_particleBlendingLayerB0;
            m_unkdd0 = playLayer->m_unkdd0;
            m_visibleObjectsCount = playLayer->m_visibleObjectsCount;
            m_visibleObjectsIndex = playLayer->m_visibleObjectsIndex;
            m_visibleObjects2Count = playLayer->m_visibleObjects2Count;
            m_visibleObjects2Index = playLayer->m_visibleObjects2Index;
            m_unked0 = playLayer->m_unked0;
            m_disabledObjectsCount = playLayer->m_disabledObjectsCount;
            m_unked8 = playLayer->m_unked8;
            m_areaObjectsCount = playLayer->m_areaObjectsCount;
            m_processedAreaObjectsCount = playLayer->m_processedAreaObjectsCount;
            m_unkee4 = playLayer->m_unkee4;
            m_disabledObjectsIndex = playLayer->m_disabledObjectsIndex;
            m_unkeec = playLayer->m_unkeec;
            m_areaObjectsIndex = playLayer->m_areaObjectsIndex;
            m_processedAreaObjectsIndex = playLayer->m_processedAreaObjectsIndex;
            m_lastUsedLinkedID = playLayer->m_lastUsedLinkedID;
            m_unk1000 = playLayer->m_unk1000;
            m_increasedLayerCapacity = playLayer->m_increasedLayerCapacity;
            m_enterEasingValuesIndex = playLayer->m_enterEasingValuesIndex;
            m_dualTouchTrigger = playLayer->m_dualTouchTrigger;
            m_clicks = playLayer->m_clicks;
            m_attempts = playLayer->m_attempts;
            m_jumping = playLayer->m_jumping;
            m_leftSectionIndex = playLayer->m_leftSectionIndex;
            m_rightSectionIndex = playLayer->m_rightSectionIndex;
            m_bottomSectionIndex = playLayer->m_bottomSectionIndex;
            m_topSectionIndex = playLayer->m_topSectionIndex;
            m_isEditor = playLayer->m_isEditor;
            m_blending = playLayer->m_blending;
            m_isPlatformer = playLayer->m_isPlatformer;
            m_player1CollisionBlock = playLayer->m_player1CollisionBlock;
            m_player2CollisionBlock = playLayer->m_player2CollisionBlock;
            m_particleCount = playLayer->m_particleCount;
            m_customParticleCount = playLayer->m_customParticleCount;
            m_particleSystemLimit = playLayer->m_particleSystemLimit;
            m_activeGradients = playLayer->m_activeGradients;
            m_objectsDeactivated = playLayer->m_objectsDeactivated;
            m_areaObjectsUpdated = playLayer->m_areaObjectsUpdated;
            m_startPosObject = playLayer->m_startPosObject;
            m_useReplay = playLayer->m_useReplay;
            m_solidCollisionObjectsCount = playLayer->m_solidCollisionObjectsCount;
            m_solidCollisionObjectsIndex = playLayer->m_solidCollisionObjectsIndex;
            m_hazardCollisionObjectsCount = playLayer->m_hazardCollisionObjectsCount;
            m_hazardCollisionObjectsIndex = playLayer->m_hazardCollisionObjectsIndex;
            m_isPracticeMode = playLayer->m_isPracticeMode;
            m_practiceMusicSync = playLayer->m_practiceMusicSync;
            m_loadingProgress = playLayer->m_loadingProgress;
            m_flashNode = playLayer->m_flashNode;
            m_unk31f8 = playLayer->m_unk31f8;
            m_cameraFlip = playLayer->m_cameraFlip;
            m_cameraWidthOffset = playLayer->m_cameraWidthOffset;
            m_cameraHeightOffset = playLayer->m_cameraHeightOffset;
            m_updateGroundShadows = playLayer->m_updateGroundShadows;
            m_levelLength = playLayer->m_levelLength;
            m_resetActiveObjects = playLayer->m_resetActiveObjects;
            m_isTestMode = playLayer->m_isTestMode;
            m_unk3229 = playLayer->m_unk3229;
            m_unk322a = playLayer->m_unk322a;
            m_cameraUnzoomedHeightOffset = playLayer->m_cameraUnzoomedHeightOffset;
            m_targetCameraHeightOffset = playLayer->m_targetCameraHeightOffset;
            m_calculateTargetHeightOffset = playLayer->m_calculateTargetHeightOffset;
            m_staticCameraShake = playLayer->m_staticCameraShake;
            m_skipCameraShake = playLayer->m_skipCameraShake;
            m_playerDied = playLayer->m_playerDied;
            m_extraDelta = playLayer->m_extraDelta;
            m_started = playLayer->m_started;
            m_unk3251 = playLayer->m_unk3251;
            m_cameraWidth = playLayer->m_cameraWidth;
            m_cameraHeight = playLayer->m_cameraHeight;
            m_cameraUnzoomedX = playLayer->m_cameraUnzoomedX;
            m_cameraX = playLayer->m_cameraX;
            m_cameraObb2 = playLayer->m_cameraObb2;
            m_activeObjectsCount = playLayer->m_activeObjectsCount;
            m_activeObjectsIndex = playLayer->m_activeObjectsIndex;
            m_backgroundColor = playLayer->m_backgroundColor;
            m_resumeTimer = playLayer->m_resumeTimer;
            m_recordInputs = playLayer->m_recordInputs;
            m_unk32a1 = playLayer->m_unk32a1;
            m_unk32a2 = playLayer->m_unk32a2;
            m_unk32a3 = playLayer->m_unk32a3;
            m_unk32a4 = playLayer->m_unk32a4;
            m_unk32c8 = playLayer->m_unk32c8;
            m_unk32d0 = playLayer->m_unk32d0;
            m_queueInterval = playLayer->m_queueInterval;
            m_coinsCollected = playLayer->m_coinsCollected;
            m_replayRandSeed = playLayer->m_replayRandSeed;
            m_unk32ec = playLayer->m_unk32ec;
            m_currentStep = playLayer->m_currentStep;
            m_queuedRecordedButtonsSize = playLayer->m_queuedRecordedButtonsSize;
            m_portalIndicators = playLayer->m_portalIndicators;
            m_orbIndicators = playLayer->m_orbIndicators;
            m_unk3380 = playLayer->m_unk3380;
            m_hideGround = playLayer->m_hideGround;
            m_keepGroupParents = playLayer->m_keepGroupParents;
            m_keyframeGroup = playLayer->m_keyframeGroup;
            m_uiLayer = playLayer->m_uiLayer;
            m_uiTriggerUI = playLayer->m_uiTriggerUI;
            m_timePlayed = playLayer->m_timePlayed;
            m_levelEndAnimationStarted = playLayer->m_levelEndAnimationStarted;
            m_points = playLayer->m_points;
            m_calcNonEffectObjectsSize = playLayer->m_calcNonEffectObjectsSize;
            m_calcCollisionBlockObjectsSize = playLayer->m_calcCollisionBlockObjectsSize;
            m_calcCollisionBlockObjects2Size = playLayer->m_calcCollisionBlockObjects2Size;
            m_sectionXFactor = playLayer->m_sectionXFactor;
            m_sectionYFactor = playLayer->m_sectionYFactor;
            m_maxGameplayY = playLayer->m_maxGameplayY;
            m_songTriggerInterval = playLayer->m_songTriggerInterval;
            m_showAudioVisualizer = playLayer->m_showAudioVisualizer;
            m_areaMovedCount = playLayer->m_areaMovedCount;
            m_areaScaledCount = playLayer->m_areaScaledCount;
            m_areaRotatedCount = playLayer->m_areaRotatedCount;
            m_areaColorCount = playLayer->m_areaColorCount;
            m_areaMovedCountTotal = playLayer->m_areaMovedCountTotal;
            m_areaScaledCountTotal = playLayer->m_areaScaledCountTotal;
            m_areaRotatedCountTotal = playLayer->m_areaRotatedCountTotal;
            m_areaColorCountTotal = playLayer->m_areaColorCountTotal;
            m_movedCount = playLayer->m_movedCount;
            m_scaledCount = playLayer->m_scaledCount;
            m_rotatedCount = playLayer->m_rotatedCount;
            m_followedCount = playLayer->m_followedCount;
            m_areaMovedCountDisplay = playLayer->m_areaMovedCountDisplay;
            m_areaScaledCountDisplay = playLayer->m_areaScaledCountDisplay;
            m_areaRotatedCountDisplay = playLayer->m_areaRotatedCountDisplay;
            m_areaColorCountDisplay = playLayer->m_areaColorCountDisplay;
            m_areaMovedCountTotalDisplay = playLayer->m_areaMovedCountTotalDisplay;
            m_areaScaledCountTotalDisplay = playLayer->m_areaScaledCountTotalDisplay;
            m_areaRotatedCountTotalDisplay = playLayer->m_areaRotatedCountTotalDisplay;
            m_areaColorCountTotalDisplay = playLayer->m_areaColorCountTotalDisplay;
            m_movedCountDisplay = playLayer->m_movedCountDisplay;
            m_scaledCountDisplay = playLayer->m_scaledCountDisplay;
            m_rotatedCountDisplay = playLayer->m_rotatedCountDisplay;
            m_followedCountDisplay = playLayer->m_followedCountDisplay;
            m_debugDrawPoints = playLayer->m_debugDrawPoints;
            m_isDebugDrawEnabled = playLayer->m_isDebugDrawEnabled;
            m_disablePlayerHitbox = playLayer->m_disablePlayerHitbox;
            m_anticheatSpike = playLayer->m_anticheatSpike;

            //GameState
            m_cameraZoom = playLayer->m_gameState.m_cameraZoom;
            m_targetCameraZoom = playLayer->m_gameState.m_targetCameraZoom;
            m_cameraOffset = playLayer->m_gameState.m_cameraOffset;
            m_unkPoint1 = playLayer->m_gameState.m_unkPoint1;
            m_unkPoint2 = playLayer->m_gameState.m_unkPoint2;
            m_unkPoint3 = playLayer->m_gameState.m_unkPoint3;
            m_unkPoint4 = playLayer->m_gameState.m_unkPoint4;
            m_unkPoint5 = playLayer->m_gameState.m_unkPoint5;
            m_unkPoint6 = playLayer->m_gameState.m_unkPoint6;
            m_unkPoint7 = playLayer->m_gameState.m_unkPoint7;
            m_unkPoint8 = playLayer->m_gameState.m_unkPoint8;
            m_unkPoint9 = playLayer->m_gameState.m_unkPoint9;
            m_unkPoint10 = playLayer->m_gameState.m_unkPoint10;
            m_unkPoint11 = playLayer->m_gameState.m_unkPoint11;
            m_unkPoint12 = playLayer->m_gameState.m_unkPoint12;
            m_unkPoint13 = playLayer->m_gameState.m_unkPoint13;
            m_unkPoint14 = playLayer->m_gameState.m_unkPoint14;
            m_unkPoint15 = playLayer->m_gameState.m_unkPoint15;
            m_unkPoint16 = playLayer->m_gameState.m_unkPoint16;
            m_unkPoint17 = playLayer->m_gameState.m_unkPoint17;
            m_unkPoint18 = playLayer->m_gameState.m_unkPoint18;
            m_unkPoint19 = playLayer->m_gameState.m_unkPoint19;
            m_unkPoint20 = playLayer->m_gameState.m_unkPoint20;
            m_unkPoint21 = playLayer->m_gameState.m_unkPoint21;
            m_unkPoint22 = playLayer->m_gameState.m_unkPoint22;
            m_unkPoint23 = playLayer->m_gameState.m_unkPoint23;
            m_unkPoint24 = playLayer->m_gameState.m_unkPoint24;
            m_unkPoint25 = playLayer->m_gameState.m_unkPoint25;
            m_unkPoint26 = playLayer->m_gameState.m_unkPoint26;
            m_unkPoint27 = playLayer->m_gameState.m_unkPoint27;
            m_unkPoint28 = playLayer->m_gameState.m_unkPoint28;
            m_unkPoint29 = playLayer->m_gameState.m_unkPoint29;
            m_unkBool1 = playLayer->m_gameState.m_unkBool1;
            m_unkInt1 = playLayer->m_gameState.m_unkInt1;
            m_unkBool2 = playLayer->m_gameState.m_unkBool2;
            m_unkInt2 = playLayer->m_gameState.m_unkInt2;
            m_unkBool3 = playLayer->m_gameState.m_unkBool3;
            m_unkPoint30 = playLayer->m_gameState.m_unkPoint30;
            m_middleGroundOffsetY = playLayer->m_gameState.m_middleGroundOffsetY;
            m_unkInt3 = playLayer->m_gameState.m_unkInt3;
            m_unkInt4 = playLayer->m_gameState.m_unkInt4;
            m_unkBool4 = playLayer->m_gameState.m_unkBool4;
            m_unkBool5 = playLayer->m_gameState.m_unkBool5;
            m_unkFloat2 = playLayer->m_gameState.m_unkFloat2;
            m_unkFloat3 = playLayer->m_gameState.m_unkFloat3;
            m_unkInt5 = playLayer->m_gameState.m_unkInt5;
            m_unkInt6 = playLayer->m_gameState.m_unkInt6;
            m_unkInt7 = playLayer->m_gameState.m_unkInt7;
            m_unkInt8 = playLayer->m_gameState.m_unkInt8;
            m_unkInt9 = playLayer->m_gameState.m_unkInt9;
            m_unkInt10 = playLayer->m_gameState.m_unkInt10;
            m_unkInt11 = playLayer->m_gameState.m_unkInt11;
            m_unkFloat4 = playLayer->m_gameState.m_unkFloat4;
            m_unkUint1 = playLayer->m_gameState.m_unkUint1;
            m_portalY = playLayer->m_gameState.m_portalY;
            m_unkBool6 = playLayer->m_gameState.m_unkBool6;
            m_gravityRelated = playLayer->m_gameState.m_gravityRelated;
            m_unkInt12 = playLayer->m_gameState.m_unkInt12;
            m_unkInt13 = playLayer->m_gameState.m_unkInt13;
            m_unkInt14 = playLayer->m_gameState.m_unkInt14;
            m_unkInt15 = playLayer->m_gameState.m_unkInt15;
            m_unkBool7 = playLayer->m_gameState.m_unkBool7;
            m_unkBool8 = playLayer->m_gameState.m_unkBool8;
            m_unkBool9 = playLayer->m_gameState.m_unkBool9;
            m_unkFloat5 = playLayer->m_gameState.m_unkFloat5;
            m_unkFloat6 = playLayer->m_gameState.m_unkFloat6;
            m_unkFloat7 = playLayer->m_gameState.m_unkFloat7;
            m_unkFloat8 = playLayer->m_gameState.m_unkFloat8;
            m_cameraAngle = playLayer->m_gameState.m_cameraAngle;
            m_targetCameraAngle = playLayer->m_gameState.m_targetCameraAngle;
            m_playerStreakBlend = playLayer->m_gameState.m_playerStreakBlend;
            m_timeWarp = playLayer->m_gameState.m_timeWarp;
            m_timeWarpRelated = playLayer->m_gameState.m_timeWarpRelated;
            m_currentChannel = playLayer->m_gameState.m_currentChannel;
            m_rotateChannel = playLayer->m_gameState.m_rotateChannel;
            m_totalTime = playLayer->m_gameState.m_totalTime;
            m_levelTime = playLayer->m_gameState.m_levelTime;
            m_unkDouble3 = playLayer->m_gameState.m_unkDouble3;
            m_unkUint2 = playLayer->m_gameState.m_unkUint2;
            m_unkUint3 = playLayer->m_gameState.m_unkUint3;
            m_currentProgress = playLayer->m_gameState.m_currentProgress;
            m_unkUint4 = playLayer->m_gameState.m_unkUint4;
            m_unkUint5 = playLayer->m_gameState.m_unkUint5;
            m_unkUint6 = playLayer->m_gameState.m_unkUint6;
            m_unkUint7 = playLayer->m_gameState.m_unkUint7;
            m_unkGameObjPtr1 = playLayer->m_gameState.m_unkGameObjPtr1;
            m_unkGameObjPtr2 = playLayer->m_gameState.m_unkGameObjPtr2;
            m_cameraPosition = playLayer->m_gameState.m_cameraPosition;
            m_unkBool10 = playLayer->m_gameState.m_unkBool10;
            m_levelFlipping = playLayer->m_gameState.m_levelFlipping;
            m_unkBool11 = playLayer->m_gameState.m_unkBool11;
            m_unkBool12 = playLayer->m_gameState.m_unkBool12;
            m_isDualMode = playLayer->m_gameState.m_isDualMode;
            m_unkFloat9 = playLayer->m_gameState.m_unkFloat9;
            m_cameraEdgeValue0 = playLayer->m_gameState.m_cameraEdgeValue0;
            m_cameraEdgeValue1 = playLayer->m_gameState.m_cameraEdgeValue1;
            m_cameraEdgeValue2 = playLayer->m_gameState.m_cameraEdgeValue2;
            m_cameraEdgeValue3 = playLayer->m_gameState.m_cameraEdgeValue3;
            m_unkUint10 = playLayer->m_gameState.m_unkUint10;
            m_unkUint11 = playLayer->m_gameState.m_unkUint11;
            m_unkUint12 = playLayer->m_gameState.m_unkUint12;
            m_cameraStepDiff = playLayer->m_gameState.m_cameraStepDiff;
            m_unkFloat10 = playLayer->m_gameState.m_unkFloat10;
            m_timeModRelated = playLayer->m_gameState.m_timeModRelated;
            m_timeModRelated2 = playLayer->m_gameState.m_timeModRelated2;
            m_unkUint13 = playLayer->m_gameState.m_unkUint13;
            m_unkPoint32 = playLayer->m_gameState.m_unkPoint32;
            m_unkPoint33 = playLayer->m_gameState.m_unkPoint33;
            m_unkBool20 = playLayer->m_gameState.m_unkBool20;
            m_unkBool21 = playLayer->m_gameState.m_unkBool21;
            m_unkBool22 = playLayer->m_gameState.m_unkBool22;
            m_unkUint14 = playLayer->m_gameState.m_unkUint14;
            m_unkBool26 = playLayer->m_gameState.m_unkBool26;
            m_cameraShakeEnabled = playLayer->m_gameState.m_cameraShakeEnabled;
            m_cameraShakeFactor = playLayer->m_gameState.m_cameraShakeFactor;
            m_unkUint15 = playLayer->m_gameState.m_unkUint15;
            m_unkUint16 = playLayer->m_gameState.m_unkUint16;
            m_unkUint64_1 = playLayer->m_gameState.m_unkUint64_1;
            m_unkPoint34 = playLayer->m_gameState.m_unkPoint34;
            m_dualRelated = playLayer->m_gameState.m_dualRelated;
            m_unkBool27 = playLayer->m_gameState.m_unkBool27;
            m_unkBool28 = playLayer->m_gameState.m_unkBool28;
            m_unkBool29 = playLayer->m_gameState.m_unkBool29;
            m_unkUint17 = playLayer->m_gameState.m_unkUint17;
            m_unkBool30 = playLayer->m_gameState.m_unkBool30;
            m_background = playLayer->m_gameState.m_background;
            m_ground = playLayer->m_gameState.m_ground;
            m_middleground = playLayer->m_gameState.m_middleground;
            m_unkBool31 = playLayer->m_gameState.m_unkBool31;
            m_gamePoints = playLayer->m_gameState.m_points;
            m_unkBool32 = playLayer->m_gameState.m_unkBool32;
            m_pauseCounter = playLayer->m_gameState.m_pauseCounter;
            m_pauseBufferTimer = playLayer->m_gameState.m_pauseBufferTimer;

            //PlayLayer
            m_unk36c8 = playLayer->m_unk36c8;
            m_unk36cc = playLayer->m_unk36cc;
            m_unk36cd = playLayer->m_unk36cd;
            m_unk36ce = playLayer->m_unk36ce;
            m_unk36cf = playLayer->m_unk36cf;
            m_damageVerifiedIndex = playLayer->m_damageVerifiedIndex;
            m_damageVerified = playLayer->m_damageVerified;
            m_passedIntegrity = playLayer->m_passedIntegrity;
            m_objectsCreated = playLayer->m_objectsCreated;
            m_unk3768 = playLayer->m_unk3768;
            m_platformerRestart = playLayer->m_platformerRestart;
            m_unk376d = playLayer->m_unk376d;
            m_isIgnoreDamageEnabled = playLayer->m_isIgnoreDamageEnabled;
            m_unk3778 = playLayer->m_unk3778;
            m_unk377c = playLayer->m_unk377c;
            m_unk3780 = playLayer->m_unk3780;
            m_unk3784 = playLayer->m_unk3784;
            m_unk3788 = playLayer->m_unk3788;
            m_unk378c = playLayer->m_unk378c;
            m_endChecked = playLayer->m_endChecked;
            m_endXPosition = playLayer->m_endXPosition;
            m_currentCheckpoint = playLayer->m_currentCheckpoint;
            m_unk37b0 = playLayer->m_unk37b0;
            m_unk37b1 = playLayer->m_unk37b1;
            m_enterEffectPosition = playLayer->m_enterEffectPosition;
            m_isSilent = playLayer->m_isSilent;
            m_unk37cc = playLayer->m_unk37cc;
            m_unk37e0 = playLayer->m_unk37e0;
            m_pulseRodIndex = playLayer->m_pulseRodIndex;
            m_maxObjectX = playLayer->m_maxObjectX;
            m_decimalPercentage = playLayer->m_decimalPercentage;
            m_hintShown = playLayer->m_hintShown;
            m_progressWidth = playLayer->m_progressWidth;
            m_progressHeight = playLayer->m_progressHeight;
            m_gravityEffectAmount = playLayer->m_gravityEffectAmount;
            m_gravityEffectsPlayed = playLayer->m_gravityEffectsPlayed;
            m_gravityEffectIndex = playLayer->m_gravityEffectIndex;
            m_doNot = playLayer->m_doNot;
            m_unk383c = playLayer->m_unk383c;
            m_skipAudioStep = playLayer->m_skipAudioStep;
            m_jumps = playLayer->m_jumps;
            m_hasJumped = playLayer->m_hasJumped;
            m_uncommittedJumps = playLayer->m_uncommittedJumps;
            m_showLeaderboardPercentage = playLayer->m_showLeaderboardPercentage;
            m_hasCompletedLevel = playLayer->m_hasCompletedLevel;
            m_inResetDelay = playLayer->m_inResetDelay;
            m_lastAttemptPercent = playLayer->m_lastAttemptPercent;
            m_endLayerStars = playLayer->m_endLayerStars;
            m_orbs = playLayer->m_orbs;
            m_diamonds = playLayer->m_diamonds;
            m_secretKey = playLayer->m_secretKey;
            m_recordingStopped = playLayer->m_recordingStopped;
            m_unk38b0 = playLayer->m_unk38b0;
            m_unk38b8 = playLayer->m_unk38b8;
            m_unk38c0 = playLayer->m_unk38c0;
            m_unk38c8 = playLayer->m_unk38c8;
            m_unk38cc = playLayer->m_unk38cc;
            m_unk38d0 = playLayer->m_unk38d0;
            m_attemptTime = playLayer->m_attemptTime;
            m_bestAttemptTime = playLayer->m_bestAttemptTime;
            m_pauseTime = playLayer->m_pauseTime;
            m_currentTime = playLayer->m_currentTime;
            m_pauseDelta = playLayer->m_pauseDelta;
            m_unk3900 = playLayer->m_unk3900;
            m_glitterEnabled = playLayer->m_glitterEnabled;
            m_effectsDisabled = playLayer->m_effectsDisabled;
            m_unk3906 = playLayer->m_unk3906;
            m_isPaused = playLayer->m_isPaused;
            m_disableGravityEffect = playLayer->m_disableGravityEffect;
            m_unk3918 = playLayer->m_unk3918;
            m_unk3920 = playLayer->m_unk3920;
            m_keyPulses = playLayer->m_keyPulses;
            m_nextColorKey = playLayer->m_nextColorKey;
            m_tryPlaceCheckpoint = playLayer->m_tryPlaceCheckpoint;
            m_activatedCheckpoint = playLayer->m_activatedCheckpoint;
            m_musicPrepared = playLayer->m_musicPrepared;
            m_endPosition = playLayer->m_endPosition;


            #ifndef GEODE_IS_ANDROID
            m_uiObjectPositions = playLayer->m_uiObjectPositions;
            m_unkdd8 = playLayer->m_unkdd8;
            m_disabledObjects = playLayer->m_disabledObjects;
            m_unke08 = playLayer->m_unke08;
            m_areaObjects = playLayer->m_areaObjects;
            m_processedAreaObjects = playLayer->m_processedAreaObjects;
            m_visibilityGroups = playLayer->m_visibilityGroups;
            m_visibleObjects = playLayer->m_visibleObjects;
            m_visibleObjects2 = playLayer->m_visibleObjects2;
            m_targetGroups = playLayer->m_targetGroups;
            m_labelObjects = playLayer->m_labelObjects;
            m_timeLabelObjects = playLayer->m_timeLabelObjects;
            m_varianceValues = playLayer->m_varianceValues;
            m_enterEasingIndices = playLayer->m_enterEasingIndices;
            m_solidCollisionObjects = playLayer->m_solidCollisionObjects;
            m_hazardCollisionObjects = playLayer->m_hazardCollisionObjects;
            m_sequenceTriggers = playLayer->m_sequenceTriggers;
            m_queuedButtons = playLayer->m_queuedButtons;
            m_queuedRecordedButtons = playLayer->m_queuedRecordedButtons;
            m_queuedReplayButtons = playLayer->m_queuedReplayButtons;
            m_unk3340 = playLayer->m_unk3340;
            m_unk3358 = playLayer->m_unk3358;
            m_activeObjects = playLayer->m_activeObjects;
            m_unk3388 = playLayer->m_unk3388;
            m_unk33a0 = playLayer->m_unk33a0;
            m_savePositionObjects = playLayer->m_savePositionObjects;
            m_savePositionValues = playLayer->m_savePositionValues;
            m_recordString = playLayer->m_recordString;
            m_pointsString = playLayer->m_pointsString;

            m_spawnChannelRelated0 = playLayer->m_gameState.m_spawnChannelRelated0;
            m_spawnChannelRelated1 = playLayer->m_gameState.m_spawnChannelRelated1;
            m_tweenActions = playLayer->m_gameState.m_tweenActions;
            m_unkUMap8 = playLayer->m_gameState.m_unkUMap8;
            m_advanceFollowInstances = playLayer->m_gameState.m_advanceFollowInstances;
            m_dynamicObjActions1 = playLayer->m_gameState.m_dynamicObjActions1;
            m_dynamicObjActions2 = playLayer->m_gameState.m_dynamicObjActions2;
            m_stateObjects = playLayer->m_gameState.m_stateObjects;
            m_unkMapPairGJGameEventIntVectorEventTriggerInstance = playLayer->m_gameState.m_unkMapPairGJGameEventIntVectorEventTriggerInstance;
            m_unkMapPairGJGameEventIntInt = playLayer->m_gameState.m_unkMapPairGJGameEventIntInt;
            m_unkVecInt1 = playLayer->m_gameState.m_unkVecInt1;
            m_unkVecInt2 = playLayer->m_gameState.m_unkVecInt2;
            m_unkUnorderedSet1 = playLayer->m_gameState.m_unkUnorderedSet1;
            m_unkMapPairIntIntInt = playLayer->m_gameState.m_unkMapPairIntIntInt;
            m_gameObjectPhysics = playLayer->m_gameState.m_gameObjectPhysics;
            m_unkVecFloat1 = playLayer->m_gameState.m_unkVecFloat1;

            m_dynamicSaveObjects = playLayer->m_dynamicSaveObjects;
            m_activeSaveObjects1 = playLayer->m_activeSaveObjects1;
            m_activeSaveObjects2 = playLayer->m_activeSaveObjects2;
            m_dynamicSaveObjects2 = playLayer->m_dynamicSaveObjects2;
            m_objectStrings = playLayer->m_objectStrings;
            #endif
        }

        void apply(PlayLayer* playLayer) {
            //GJBaseGameLayer
            playLayer->m_playbackMode = m_playbackMode;
            playLayer->m_lowDetailMode = m_lowDetailMode;
            playLayer->m_extraLDM = m_extraLDM;
            playLayer->m_ignoreDamage = m_ignoreDamage;
            playLayer->m_enable22Changes = m_enable22Changes;
            playLayer->m_allowStaticRotate = m_allowStaticRotate;
            playLayer->m_fixNegativeScale = m_fixNegativeScale;
            playLayer->m_startingFromBeginning = m_startingFromBeginning;
            playLayer->m_hoverNode = m_hoverNode;
            playLayer->m_areaTransformNode = m_areaTransformNode;
            playLayer->m_areaSkewNode = m_areaSkewNode;
            playLayer->m_areaScaleNode = m_areaScaleNode;
            playLayer->m_areaRotateNode = m_areaRotateNode;
            playLayer->m_areaTransformNode2 = m_areaTransformNode2;
            playLayer->m_obb2 = m_obb2;
            playLayer->m_particleBlendingLayerB0 = m_particleBlendingLayerB0;
            playLayer->m_unkdd0 = m_unkdd0;
            playLayer->m_visibleObjectsCount = m_visibleObjectsCount;
            playLayer->m_visibleObjectsIndex = m_visibleObjectsIndex;
            playLayer->m_visibleObjects2Count = m_visibleObjects2Count;
            playLayer->m_visibleObjects2Index = m_visibleObjects2Index;
            playLayer->m_unked0 = m_unked0;
            playLayer->m_disabledObjectsCount = m_disabledObjectsCount;
            playLayer->m_unked8 = m_unked8;
            playLayer->m_areaObjectsCount = m_areaObjectsCount;
            playLayer->m_processedAreaObjectsCount = m_processedAreaObjectsCount;
            playLayer->m_unkee4 = m_unkee4;
            playLayer->m_disabledObjectsIndex = m_disabledObjectsIndex;
            playLayer->m_unkeec = m_unkeec;
            playLayer->m_areaObjectsIndex = m_areaObjectsIndex;
            playLayer->m_processedAreaObjectsIndex = m_processedAreaObjectsIndex;
            playLayer->m_lastUsedLinkedID = m_lastUsedLinkedID;
            playLayer->m_unk1000 = m_unk1000;
            playLayer->m_increasedLayerCapacity = m_increasedLayerCapacity;
            playLayer->m_enterEasingValuesIndex = m_enterEasingValuesIndex;
            playLayer->m_dualTouchTrigger = m_dualTouchTrigger;
            playLayer->m_clicks = m_clicks;
            playLayer->m_attempts = m_attempts;
            playLayer->m_jumping = m_jumping;
            playLayer->m_leftSectionIndex = m_leftSectionIndex;
            playLayer->m_rightSectionIndex = m_rightSectionIndex;
            playLayer->m_bottomSectionIndex = m_bottomSectionIndex;
            playLayer->m_topSectionIndex = m_topSectionIndex;
            playLayer->m_isEditor = m_isEditor;
            playLayer->m_blending = m_blending;
            playLayer->m_isPlatformer = m_isPlatformer;
            playLayer->m_player1CollisionBlock = m_player1CollisionBlock;
            playLayer->m_player2CollisionBlock = m_player2CollisionBlock;
            playLayer->m_particleCount = m_particleCount;
            playLayer->m_customParticleCount = m_customParticleCount;
            playLayer->m_particleSystemLimit = m_particleSystemLimit;
            playLayer->m_activeGradients = m_activeGradients;
            playLayer->m_objectsDeactivated = m_objectsDeactivated;
            playLayer->m_areaObjectsUpdated = m_areaObjectsUpdated;
            playLayer->m_startPosObject = m_startPosObject;
            playLayer->m_useReplay = m_useReplay;
            playLayer->m_solidCollisionObjectsCount = m_solidCollisionObjectsCount;
            playLayer->m_solidCollisionObjectsIndex = m_solidCollisionObjectsIndex;
            playLayer->m_hazardCollisionObjectsCount = m_hazardCollisionObjectsCount;
            playLayer->m_hazardCollisionObjectsIndex = m_hazardCollisionObjectsIndex;
            playLayer->m_isPracticeMode = m_isPracticeMode;
            playLayer->m_practiceMusicSync = m_practiceMusicSync;
            playLayer->m_loadingProgress = m_loadingProgress;
            playLayer->m_flashNode = m_flashNode;
            playLayer->m_unk31f8 = m_unk31f8;
            playLayer->m_cameraFlip = m_cameraFlip;
            playLayer->m_cameraWidthOffset = m_cameraWidthOffset;
            playLayer->m_cameraHeightOffset = m_cameraHeightOffset;
            playLayer->m_updateGroundShadows = m_updateGroundShadows;
            playLayer->m_levelLength = m_levelLength;
            playLayer->m_resetActiveObjects = m_resetActiveObjects;
            playLayer->m_isTestMode = m_isTestMode;
            playLayer->m_unk3229 = m_unk3229;
            playLayer->m_unk322a = m_unk322a;
            playLayer->m_cameraUnzoomedHeightOffset = m_cameraUnzoomedHeightOffset;
            playLayer->m_targetCameraHeightOffset = m_targetCameraHeightOffset;
            playLayer->m_calculateTargetHeightOffset = m_calculateTargetHeightOffset;
            playLayer->m_staticCameraShake = m_staticCameraShake;
            playLayer->m_skipCameraShake = m_skipCameraShake;
            playLayer->m_playerDied = m_playerDied;
            playLayer->m_extraDelta = m_extraDelta;
            playLayer->m_started = m_started;
            playLayer->m_unk3251 = m_unk3251;
            playLayer->m_cameraWidth = m_cameraWidth;
            playLayer->m_cameraHeight = m_cameraHeight;
            playLayer->m_cameraUnzoomedX = m_cameraUnzoomedX;
            playLayer->m_cameraX = m_cameraX;
            playLayer->m_cameraObb2 = m_cameraObb2;
            playLayer->m_activeObjectsCount = m_activeObjectsCount;
            playLayer->m_activeObjectsIndex = m_activeObjectsIndex;
            playLayer->m_backgroundColor = m_backgroundColor;
            playLayer->m_resumeTimer = m_resumeTimer;
            playLayer->m_recordInputs = m_recordInputs;
            playLayer->m_unk32a1 = m_unk32a1;
            playLayer->m_unk32a2 = m_unk32a2;
            playLayer->m_unk32a3 = m_unk32a3;
            playLayer->m_unk32a4 = m_unk32a4;
            playLayer->m_unk32c8 = m_unk32c8;
            playLayer->m_unk32d0 = m_unk32d0;
            playLayer->m_queueInterval = m_queueInterval;
            playLayer->m_coinsCollected = m_coinsCollected;
            playLayer->m_replayRandSeed = m_replayRandSeed;
            playLayer->m_unk32ec = m_unk32ec;
            playLayer->m_currentStep = m_currentStep;
            playLayer->m_queuedRecordedButtonsSize = m_queuedRecordedButtonsSize;
            playLayer->m_portalIndicators = m_portalIndicators;
            playLayer->m_orbIndicators = m_orbIndicators;
            playLayer->m_unk3380 = m_unk3380;
            playLayer->m_hideGround = m_hideGround;
            playLayer->m_keepGroupParents = m_keepGroupParents;
            playLayer->m_keyframeGroup = m_keyframeGroup;
            playLayer->m_uiLayer = m_uiLayer;
            playLayer->m_uiTriggerUI = m_uiTriggerUI;
            playLayer->m_timePlayed = m_timePlayed;
            playLayer->m_levelEndAnimationStarted = m_levelEndAnimationStarted;
            playLayer->m_points = m_points;
            playLayer->m_calcNonEffectObjectsSize = m_calcNonEffectObjectsSize;
            playLayer->m_calcCollisionBlockObjectsSize = m_calcCollisionBlockObjectsSize;
            playLayer->m_calcCollisionBlockObjects2Size = m_calcCollisionBlockObjects2Size;
            playLayer->m_sectionXFactor = m_sectionXFactor;
            playLayer->m_sectionYFactor = m_sectionYFactor;
            playLayer->m_maxGameplayY = m_maxGameplayY;
            playLayer->m_songTriggerInterval = m_songTriggerInterval;
            playLayer->m_showAudioVisualizer = m_showAudioVisualizer;
            playLayer->m_areaMovedCount = m_areaMovedCount;
            playLayer->m_areaScaledCount = m_areaScaledCount;
            playLayer->m_areaRotatedCount = m_areaRotatedCount;
            playLayer->m_areaColorCount = m_areaColorCount;
            playLayer->m_areaMovedCountTotal = m_areaMovedCountTotal;
            playLayer->m_areaScaledCountTotal = m_areaScaledCountTotal;
            playLayer->m_areaRotatedCountTotal = m_areaRotatedCountTotal;
            playLayer->m_areaColorCountTotal = m_areaColorCountTotal;
            playLayer->m_movedCount = m_movedCount;
            playLayer->m_scaledCount = m_scaledCount;
            playLayer->m_rotatedCount = m_rotatedCount;
            playLayer->m_followedCount = m_followedCount;
            playLayer->m_areaMovedCountDisplay = m_areaMovedCountDisplay;
            playLayer->m_areaScaledCountDisplay = m_areaScaledCountDisplay;
            playLayer->m_areaRotatedCountDisplay = m_areaRotatedCountDisplay;
            playLayer->m_areaColorCountDisplay = m_areaColorCountDisplay;
            playLayer->m_areaMovedCountTotalDisplay = m_areaMovedCountTotalDisplay;
            playLayer->m_areaScaledCountTotalDisplay = m_areaScaledCountTotalDisplay;
            playLayer->m_areaRotatedCountTotalDisplay = m_areaRotatedCountTotalDisplay;
            playLayer->m_areaColorCountTotalDisplay = m_areaColorCountTotalDisplay;
            playLayer->m_movedCountDisplay = m_movedCountDisplay;
            playLayer->m_scaledCountDisplay = m_scaledCountDisplay;
            playLayer->m_rotatedCountDisplay = m_rotatedCountDisplay;
            playLayer->m_followedCountDisplay = m_followedCountDisplay;
            playLayer->m_debugDrawPoints = m_debugDrawPoints;
            playLayer->m_isDebugDrawEnabled = m_isDebugDrawEnabled;
            playLayer->m_disablePlayerHitbox = m_disablePlayerHitbox;
            playLayer->m_anticheatSpike = m_anticheatSpike;

            //GameState
            playLayer->m_gameState.m_cameraZoom = m_cameraZoom;
            playLayer->m_gameState.m_targetCameraZoom = m_targetCameraZoom;
            playLayer->m_gameState.m_cameraOffset = m_cameraOffset;
            playLayer->m_gameState.m_unkPoint1 = m_unkPoint1;
            playLayer->m_gameState.m_unkPoint2 = m_unkPoint2;
            playLayer->m_gameState.m_unkPoint3 = m_unkPoint3;
            playLayer->m_gameState.m_unkPoint4 = m_unkPoint4;
            playLayer->m_gameState.m_unkPoint5 = m_unkPoint5;
            playLayer->m_gameState.m_unkPoint6 = m_unkPoint6;
            playLayer->m_gameState.m_unkPoint7 = m_unkPoint7;
            playLayer->m_gameState.m_unkPoint8 = m_unkPoint8;
            playLayer->m_gameState.m_unkPoint9 = m_unkPoint9;
            playLayer->m_gameState.m_unkPoint10 = m_unkPoint10;
            playLayer->m_gameState.m_unkPoint11 = m_unkPoint11;
            playLayer->m_gameState.m_unkPoint12 = m_unkPoint12;
            playLayer->m_gameState.m_unkPoint13 = m_unkPoint13;
            playLayer->m_gameState.m_unkPoint14 = m_unkPoint14;
            playLayer->m_gameState.m_unkPoint15 = m_unkPoint15;
            playLayer->m_gameState.m_unkPoint16 = m_unkPoint16;
            playLayer->m_gameState.m_unkPoint17 = m_unkPoint17;
            playLayer->m_gameState.m_unkPoint18 = m_unkPoint18;
            playLayer->m_gameState.m_unkPoint19 = m_unkPoint19;
            playLayer->m_gameState.m_unkPoint20 = m_unkPoint20;
            playLayer->m_gameState.m_unkPoint21 = m_unkPoint21;
            playLayer->m_gameState.m_unkPoint22 = m_unkPoint22;
            playLayer->m_gameState.m_unkPoint23 = m_unkPoint23;
            playLayer->m_gameState.m_unkPoint24 = m_unkPoint24;
            playLayer->m_gameState.m_unkPoint25 = m_unkPoint25;
            playLayer->m_gameState.m_unkPoint26 = m_unkPoint26;
            playLayer->m_gameState.m_unkPoint27 = m_unkPoint27;
            playLayer->m_gameState.m_unkPoint28 = m_unkPoint28;
            playLayer->m_gameState.m_unkPoint29 = m_unkPoint29;
            playLayer->m_gameState.m_unkBool1 = m_unkBool1;
            playLayer->m_gameState.m_unkInt1 = m_unkInt1;
            playLayer->m_gameState.m_unkBool2 = m_unkBool2;
            playLayer->m_gameState.m_unkInt2 = m_unkInt2;
            playLayer->m_gameState.m_unkBool3 = m_unkBool3;
            playLayer->m_gameState.m_unkPoint30 = m_unkPoint30;
            playLayer->m_gameState.m_middleGroundOffsetY = m_middleGroundOffsetY;
            playLayer->m_gameState.m_unkInt3 = m_unkInt3;
            playLayer->m_gameState.m_unkInt4 = m_unkInt4;
            playLayer->m_gameState.m_unkBool4 = m_unkBool4;
            playLayer->m_gameState.m_unkBool5 = m_unkBool5;
            playLayer->m_gameState.m_unkFloat2 = m_unkFloat2;
            playLayer->m_gameState.m_unkFloat3 = m_unkFloat3;
            playLayer->m_gameState.m_unkInt5 = m_unkInt5;
            playLayer->m_gameState.m_unkInt6 = m_unkInt6;
            playLayer->m_gameState.m_unkInt7 = m_unkInt7;
            playLayer->m_gameState.m_unkInt8 = m_unkInt8;
            playLayer->m_gameState.m_unkInt9 = m_unkInt9;
            playLayer->m_gameState.m_unkInt10 = m_unkInt10;
            playLayer->m_gameState.m_unkInt11 = m_unkInt11;
            playLayer->m_gameState.m_unkFloat4 = m_unkFloat4;
            playLayer->m_gameState.m_unkUint1 = m_unkUint1;
            playLayer->m_gameState.m_portalY = m_portalY;
            playLayer->m_gameState.m_unkBool6 = m_unkBool6;
            playLayer->m_gameState.m_gravityRelated = m_gravityRelated;
            playLayer->m_gameState.m_unkInt12 = m_unkInt12;
            playLayer->m_gameState.m_unkInt13 = m_unkInt13;
            playLayer->m_gameState.m_unkInt14 = m_unkInt14;
            playLayer->m_gameState.m_unkInt15 = m_unkInt15;
            playLayer->m_gameState.m_unkBool7 = m_unkBool7;
            playLayer->m_gameState.m_unkBool8 = m_unkBool8;
            playLayer->m_gameState.m_unkBool9 = m_unkBool9;
            playLayer->m_gameState.m_unkFloat5 = m_unkFloat5;
            playLayer->m_gameState.m_unkFloat6 = m_unkFloat6;
            playLayer->m_gameState.m_unkFloat7 = m_unkFloat7;
            playLayer->m_gameState.m_unkFloat8 = m_unkFloat8;
            playLayer->m_gameState.m_cameraAngle = m_cameraAngle;
            playLayer->m_gameState.m_targetCameraAngle = m_targetCameraAngle;
            playLayer->m_gameState.m_playerStreakBlend = m_playerStreakBlend;
            playLayer->m_gameState.m_timeWarp = m_timeWarp;
            playLayer->m_gameState.m_timeWarpRelated = m_timeWarpRelated;
            playLayer->m_gameState.m_currentChannel = m_currentChannel;
            playLayer->m_gameState.m_rotateChannel = m_rotateChannel;
            playLayer->m_gameState.m_totalTime = m_totalTime;
            playLayer->m_gameState.m_levelTime = m_levelTime;
            playLayer->m_gameState.m_unkDouble3 = m_unkDouble3;
            playLayer->m_gameState.m_unkUint2 = m_unkUint2;
            playLayer->m_gameState.m_unkUint3 = m_unkUint3;
            playLayer->m_gameState.m_currentProgress = m_currentProgress;
            playLayer->m_gameState.m_unkUint4 = m_unkUint4;
            playLayer->m_gameState.m_unkUint5 = m_unkUint5;
            playLayer->m_gameState.m_unkUint6 = m_unkUint6;
            playLayer->m_gameState.m_unkUint7 = m_unkUint7;
            playLayer->m_gameState.m_unkGameObjPtr1 = m_unkGameObjPtr1;
            playLayer->m_gameState.m_unkGameObjPtr2 = m_unkGameObjPtr2;
            playLayer->m_gameState.m_cameraPosition = m_cameraPosition;
            playLayer->m_gameState.m_unkBool10 = m_unkBool10;
            playLayer->m_gameState.m_levelFlipping = m_levelFlipping;
            playLayer->m_gameState.m_unkBool11 = m_unkBool11;
            playLayer->m_gameState.m_unkBool12 = m_unkBool12;
            playLayer->m_gameState.m_isDualMode = m_isDualMode;
            playLayer->m_gameState.m_unkFloat9 = m_unkFloat9;
            playLayer->m_gameState.m_cameraEdgeValue0 = m_cameraEdgeValue0;
            playLayer->m_gameState.m_cameraEdgeValue1 = m_cameraEdgeValue1;
            playLayer->m_gameState.m_cameraEdgeValue2 = m_cameraEdgeValue2;
            playLayer->m_gameState.m_cameraEdgeValue3 = m_cameraEdgeValue3;
            playLayer->m_gameState.m_unkUint10 = m_unkUint10;
            playLayer->m_gameState.m_unkUint11 = m_unkUint11;
            playLayer->m_gameState.m_unkUint12 = m_unkUint12;
            playLayer->m_gameState.m_cameraStepDiff = m_cameraStepDiff;
            playLayer->m_gameState.m_unkFloat10 = m_unkFloat10;
            playLayer->m_gameState.m_timeModRelated = m_timeModRelated;
            playLayer->m_gameState.m_timeModRelated2 = m_timeModRelated2;
            playLayer->m_gameState.m_unkUint13 = m_unkUint13;
            playLayer->m_gameState.m_unkPoint32 = m_unkPoint32;
            playLayer->m_gameState.m_unkPoint33 = m_unkPoint33;
            playLayer->m_gameState.m_unkBool20 = m_unkBool20;
            playLayer->m_gameState.m_unkBool21 = m_unkBool21;
            playLayer->m_gameState.m_unkBool22 = m_unkBool22;
            playLayer->m_gameState.m_unkUint14 = m_unkUint14;
            playLayer->m_gameState.m_unkBool26 = m_unkBool26;
            playLayer->m_gameState.m_cameraShakeEnabled = m_cameraShakeEnabled;
            playLayer->m_gameState.m_cameraShakeFactor = m_cameraShakeFactor;
            playLayer->m_gameState.m_unkUint15 = m_unkUint15;
            playLayer->m_gameState.m_unkUint16 = m_unkUint16;
            playLayer->m_gameState.m_unkUint64_1 = m_unkUint64_1;
            playLayer->m_gameState.m_unkPoint34 = m_unkPoint34;
            playLayer->m_gameState.m_dualRelated = m_dualRelated;
            playLayer->m_gameState.m_unkBool27 = m_unkBool27;
            playLayer->m_gameState.m_unkBool28 = m_unkBool28;
            playLayer->m_gameState.m_unkBool29 = m_unkBool29;
            playLayer->m_gameState.m_unkUint17 = m_unkUint17;
            playLayer->m_gameState.m_unkBool30 = m_unkBool30;
            playLayer->m_gameState.m_background = m_background;
            playLayer->m_gameState.m_ground = m_ground;
            playLayer->m_gameState.m_middleground = m_middleground;
            playLayer->m_gameState.m_unkBool31 = m_unkBool31;
            playLayer->m_gameState.m_points = m_gamePoints;
            playLayer->m_gameState.m_unkBool32 = m_unkBool32;
            playLayer->m_gameState.m_pauseCounter = m_pauseCounter;
            playLayer->m_gameState.m_pauseBufferTimer = m_pauseBufferTimer;

            //PlayLayer
            playLayer->m_unk36c8 = m_unk36c8;
            playLayer->m_unk36cc = m_unk36cc;
            playLayer->m_unk36cd = m_unk36cd;
            playLayer->m_unk36ce = m_unk36ce;
            playLayer->m_unk36cf = m_unk36cf;
            playLayer->m_damageVerifiedIndex = m_damageVerifiedIndex;
            playLayer->m_damageVerified = m_damageVerified;
            playLayer->m_passedIntegrity = m_passedIntegrity;
            playLayer->m_objectsCreated = m_objectsCreated;
            playLayer->m_unk3768 = m_unk3768;
            playLayer->m_platformerRestart = m_platformerRestart;
            playLayer->m_unk376d = m_unk376d;
            playLayer->m_isIgnoreDamageEnabled = m_isIgnoreDamageEnabled;
            playLayer->m_unk3778 = m_unk3778;
            playLayer->m_unk377c = m_unk377c;
            playLayer->m_unk3780 = m_unk3780;
            playLayer->m_unk3784 = m_unk3784;
            playLayer->m_unk3788 = m_unk3788;
            playLayer->m_unk378c = m_unk378c;
            playLayer->m_endChecked = m_endChecked;
            playLayer->m_endXPosition = m_endXPosition;
            playLayer->m_currentCheckpoint = m_currentCheckpoint;
            playLayer->m_unk37b0 = m_unk37b0;
            playLayer->m_unk37b1 = m_unk37b1;
            playLayer->m_enterEffectPosition = m_enterEffectPosition;
            playLayer->m_isSilent = m_isSilent;
            playLayer->m_unk37cc = m_unk37cc;
            playLayer->m_unk37e0 = m_unk37e0;
            playLayer->m_pulseRodIndex = m_pulseRodIndex;
            playLayer->m_maxObjectX = m_maxObjectX;
            playLayer->m_decimalPercentage = m_decimalPercentage;
            playLayer->m_hintShown = m_hintShown;
            playLayer->m_progressWidth = m_progressWidth;
            playLayer->m_progressHeight = m_progressHeight;
            playLayer->m_gravityEffectAmount = m_gravityEffectAmount;
            playLayer->m_gravityEffectsPlayed = m_gravityEffectsPlayed;
            playLayer->m_gravityEffectIndex = m_gravityEffectIndex;
            playLayer->m_doNot = m_doNot;
            playLayer->m_unk383c = m_unk383c;
            playLayer->m_skipAudioStep = m_skipAudioStep;
            playLayer->m_jumps = m_jumps;
            playLayer->m_hasJumped = m_hasJumped;
            playLayer->m_uncommittedJumps = m_uncommittedJumps;
            playLayer->m_showLeaderboardPercentage = m_showLeaderboardPercentage;
            playLayer->m_hasCompletedLevel = m_hasCompletedLevel;
            playLayer->m_inResetDelay = m_inResetDelay;
            playLayer->m_lastAttemptPercent = m_lastAttemptPercent;
            playLayer->m_endLayerStars = m_endLayerStars;
            playLayer->m_orbs = m_orbs;
            playLayer->m_diamonds = m_diamonds;
            playLayer->m_secretKey = m_secretKey;
            playLayer->m_recordingStopped = m_recordingStopped;
            playLayer->m_unk38b0 = m_unk38b0;
            playLayer->m_unk38b8 = m_unk38b8;
            playLayer->m_unk38c0 = m_unk38c0;
            playLayer->m_unk38c8 = m_unk38c8;
            playLayer->m_unk38cc = m_unk38cc;
            playLayer->m_unk38d0 = m_unk38d0;
            playLayer->m_attemptTime = m_attemptTime;
            playLayer->m_bestAttemptTime = m_bestAttemptTime;
            playLayer->m_pauseTime = m_pauseTime;
            playLayer->m_currentTime = m_currentTime;
            playLayer->m_pauseDelta = m_pauseDelta;
            playLayer->m_unk3900 = m_unk3900;
            playLayer->m_glitterEnabled = m_glitterEnabled;
            playLayer->m_effectsDisabled = m_effectsDisabled;
            playLayer->m_unk3906 = m_unk3906;
            playLayer->m_isPaused = m_isPaused;
            playLayer->m_disableGravityEffect = m_disableGravityEffect;
            playLayer->m_unk3918 = m_unk3918;
            playLayer->m_unk3920 = m_unk3920;
            playLayer->m_keyPulses = m_keyPulses;
            playLayer->m_nextColorKey = m_nextColorKey;
            playLayer->m_tryPlaceCheckpoint = m_tryPlaceCheckpoint;
            playLayer->m_activatedCheckpoint = m_activatedCheckpoint;
            playLayer->m_musicPrepared = m_musicPrepared;
            playLayer->m_endPosition = m_endPosition;

            #ifndef GEODE_IS_ANDROID
            playLayer->m_uiObjectPositions = m_uiObjectPositions;
            playLayer->m_unkdd8 = m_unkdd8;
            playLayer->m_disabledObjects = m_disabledObjects;
            playLayer->m_unke08 = m_unke08;
            playLayer->m_areaObjects = m_areaObjects;
            playLayer->m_processedAreaObjects = m_processedAreaObjects;
            playLayer->m_visibilityGroups = m_visibilityGroups;
            playLayer->m_visibleObjects = m_visibleObjects;
            playLayer->m_visibleObjects2 = m_visibleObjects2;
            playLayer->m_targetGroups = m_targetGroups;
            playLayer->m_labelObjects = m_labelObjects;
            playLayer->m_timeLabelObjects = m_timeLabelObjects;
            playLayer->m_varianceValues = m_varianceValues;
            playLayer->m_enterEasingIndices = m_enterEasingIndices;
            playLayer->m_solidCollisionObjects = m_solidCollisionObjects;
            playLayer->m_hazardCollisionObjects = m_hazardCollisionObjects;
            playLayer->m_sequenceTriggers = m_sequenceTriggers;
            playLayer->m_queuedButtons = m_queuedButtons;
            playLayer->m_queuedRecordedButtons = m_queuedRecordedButtons;
            playLayer->m_queuedReplayButtons = m_queuedReplayButtons;
            playLayer->m_unk3340 = m_unk3340;
            playLayer->m_unk3358 = m_unk3358;
            playLayer->m_activeObjects = m_activeObjects;
            playLayer->m_unk3388 = m_unk3388;
            playLayer->m_unk33a0 = m_unk33a0;
            playLayer->m_savePositionObjects = m_savePositionObjects;
            playLayer->m_savePositionValues = m_savePositionValues;
            playLayer->m_recordString = m_recordString;
            playLayer->m_pointsString = m_pointsString;

            playLayer->m_gameState.m_spawnChannelRelated0 = m_spawnChannelRelated0;
            playLayer->m_gameState.m_spawnChannelRelated1 = m_spawnChannelRelated1;
            playLayer->m_gameState.m_tweenActions = m_tweenActions;
            playLayer->m_gameState.m_unkUMap8 = m_unkUMap8;
            playLayer->m_gameState.m_advanceFollowInstances = m_advanceFollowInstances;
            playLayer->m_gameState.m_dynamicObjActions1 = m_dynamicObjActions1;
            playLayer->m_gameState.m_dynamicObjActions2 = m_dynamicObjActions2;
            playLayer->m_gameState.m_unkMapPairGJGameEventIntVectorEventTriggerInstance = m_unkMapPairGJGameEventIntVectorEventTriggerInstance;
            playLayer->m_gameState.m_unkMapPairGJGameEventIntInt = m_unkMapPairGJGameEventIntInt;
            playLayer->m_gameState.m_unkVecInt1 = m_unkVecInt1;
            playLayer->m_gameState.m_unkVecInt2 = m_unkVecInt2;
            playLayer->m_gameState.m_unkUnorderedSet1 = m_unkUnorderedSet1;
            playLayer->m_gameState.m_unkMapPairIntIntInt = m_unkMapPairIntIntInt;
            playLayer->m_gameState.m_gameObjectPhysics = m_gameObjectPhysics;
            playLayer->m_gameState.m_unkVecFloat1 = m_unkVecFloat1;

            playLayer->m_dynamicSaveObjects = m_dynamicSaveObjects;
            playLayer->m_activeSaveObjects1 = m_activeSaveObjects1;
            playLayer->m_activeSaveObjects2 = m_activeSaveObjects2;
            playLayer->m_dynamicSaveObjects2 = m_dynamicSaveObjects2;
            playLayer->m_objectStrings = m_objectStrings;
            #endif
        }

        private:
        //GJBaseGameLayer
        PlaybackMode m_playbackMode;
        bool m_lowDetailMode;
        bool m_extraLDM;
        bool m_ignoreDamage;
        bool m_enable22Changes;
        bool m_allowStaticRotate;
        bool m_fixNegativeScale;
        bool m_startingFromBeginning;
        cocos2d::CCNode* m_hoverNode;
        cocos2d::CCNode* m_areaTransformNode;
        cocos2d::CCNode* m_areaSkewNode;
        cocos2d::CCNode* m_areaScaleNode;
        cocos2d::CCNode* m_areaRotateNode;
        cocos2d::CCNode* m_areaTransformNode2;
        OBB2D* m_obb2;
        cocos2d::CCSpriteBatchNode* m_particleBlendingLayerB0;
        cocos2d::CCNode* m_unkdd0;
        int m_visibleObjectsCount;
        int m_visibleObjectsIndex;
        int m_visibleObjects2Count;
        int m_visibleObjects2Index;
        int m_unked0;
        int m_disabledObjectsCount;
        int m_unked8;
        int m_areaObjectsCount;
        int m_processedAreaObjectsCount;
        int m_unkee4;
        int m_disabledObjectsIndex;
        int m_unkeec;
        int m_areaObjectsIndex;
        int m_processedAreaObjectsIndex;
        int m_lastUsedLinkedID;
        void* m_unk1000;
        bool m_increasedLayerCapacity;
        int m_enterEasingValuesIndex;
        bool m_dualTouchTrigger;
        int m_clicks;
        int m_attempts;
        bool m_jumping;
        int m_leftSectionIndex;
        int m_rightSectionIndex;
        int m_bottomSectionIndex;
        int m_topSectionIndex;
        bool m_isEditor;
        bool m_blending;
        bool m_isPlatformer;
        GameObject* m_player1CollisionBlock;
        GameObject* m_player2CollisionBlock;
        int m_particleCount;
        int m_customParticleCount;
        int m_particleSystemLimit;
        int m_activeGradients;
        bool m_objectsDeactivated;
        bool m_areaObjectsUpdated;
        StartPosObject* m_startPosObject;
        bool m_useReplay;
        int m_solidCollisionObjectsCount;
        int m_solidCollisionObjectsIndex;
        int m_hazardCollisionObjectsCount;
        int m_hazardCollisionObjectsIndex;
        bool m_isPracticeMode;
        bool m_practiceMusicSync;
        float m_loadingProgress;
        cocos2d::CCNode* m_flashNode;
        float m_unk31f8;
        float m_cameraFlip;
        float m_cameraWidthOffset;
        float m_cameraHeightOffset;
        bool m_updateGroundShadows;
        float m_levelLength;
        bool m_resetActiveObjects;
        bool m_isTestMode;
        bool m_unk3229;
        bool m_unk322a;
        float m_cameraUnzoomedHeightOffset;
        float m_targetCameraHeightOffset;
        bool m_calculateTargetHeightOffset;
        bool m_staticCameraShake;
        bool m_skipCameraShake;
        bool m_playerDied;
        double m_extraDelta;
        bool m_started;
        bool m_unk3251;
        float m_cameraWidth;
        float m_cameraHeight;
        float m_cameraUnzoomedX;
        float m_cameraX;
        OBB2D* m_cameraObb2;
        int m_activeObjectsCount;
        int m_activeObjectsIndex;
        cocos2d::ccColor3B m_backgroundColor;
        int m_resumeTimer;
        bool m_recordInputs;
        bool m_unk32a1;
        bool m_unk32a2;
        bool m_unk32a3;
        bool m_unk32a4;
        cocos2d::CCObject* m_unk32c8;
        int m_unk32d0;
        double m_queueInterval;
        uint64_t m_coinsCollected;
        int m_replayRandSeed;
        int m_unk32ec;
        int m_currentStep;
        int m_queuedRecordedButtonsSize;
        bool m_portalIndicators;
        bool m_orbIndicators;
        float m_unk3380;
        bool m_hideGround;
        bool m_keepGroupParents;
        int m_keyframeGroup;
        UILayer* m_uiLayer;
        cocos2d::CCNode* m_uiTriggerUI;
        double m_timePlayed;
        bool m_levelEndAnimationStarted;
        int m_points;
        int m_calcNonEffectObjectsSize;
        int m_calcCollisionBlockObjectsSize;
        int m_calcCollisionBlockObjects2Size;
        float m_sectionXFactor;
        float m_sectionYFactor;
        float m_maxGameplayY;
        float m_songTriggerInterval;
        bool m_showAudioVisualizer;
        int m_areaMovedCount;
        int m_areaScaledCount;
        int m_areaRotatedCount;
        int m_areaColorCount;
        int m_areaMovedCountTotal;
        int m_areaScaledCountTotal;
        int m_areaRotatedCountTotal;
        int m_areaColorCountTotal;
        int m_movedCount;
        int m_scaledCount;
        int m_rotatedCount;
        int m_followedCount;
        int m_areaMovedCountDisplay;
        int m_areaScaledCountDisplay;
        int m_areaRotatedCountDisplay;
        int m_areaColorCountDisplay;
        int m_areaMovedCountTotalDisplay;
        int m_areaScaledCountTotalDisplay;
        int m_areaRotatedCountTotalDisplay;
        int m_areaColorCountTotalDisplay;
        int m_movedCountDisplay;
        int m_scaledCountDisplay;
        int m_rotatedCountDisplay;
        int m_followedCountDisplay;
        std::array<cocos2d::CCPoint, 400>* m_debugDrawPoints;
        bool m_isDebugDrawEnabled;
        bool m_disablePlayerHitbox;
        GameObject* m_anticheatSpike;

        //GameState
        float m_cameraZoom;
        float m_targetCameraZoom;
        cocos2d::CCPoint m_cameraOffset;
        cocos2d::CCPoint m_unkPoint1;
        cocos2d::CCPoint m_unkPoint2;
        cocos2d::CCPoint m_unkPoint3;
        cocos2d::CCPoint m_unkPoint4;
        cocos2d::CCPoint m_unkPoint5;
        cocos2d::CCPoint m_unkPoint6;
        cocos2d::CCPoint m_unkPoint7;
        cocos2d::CCPoint m_unkPoint8;
        cocos2d::CCPoint m_unkPoint9;
        cocos2d::CCPoint m_unkPoint10;
        cocos2d::CCPoint m_unkPoint11;
        cocos2d::CCPoint m_unkPoint12;
        cocos2d::CCPoint m_unkPoint13;
        cocos2d::CCPoint m_unkPoint14;
        cocos2d::CCPoint m_unkPoint15;
        cocos2d::CCPoint m_unkPoint16;
        cocos2d::CCPoint m_unkPoint17;
        cocos2d::CCPoint m_unkPoint18;
        cocos2d::CCPoint m_unkPoint19;
        cocos2d::CCPoint m_unkPoint20;
        cocos2d::CCPoint m_unkPoint21;
        cocos2d::CCPoint m_unkPoint22;
        cocos2d::CCPoint m_unkPoint23;
        cocos2d::CCPoint m_unkPoint24;
        cocos2d::CCPoint m_unkPoint25;
        cocos2d::CCPoint m_unkPoint26;
        cocos2d::CCPoint m_unkPoint27;
        cocos2d::CCPoint m_unkPoint28;
        cocos2d::CCPoint m_unkPoint29;
        bool m_unkBool1;
        int m_unkInt1;
        bool m_unkBool2;
        int m_unkInt2;
        bool m_unkBool3;
        cocos2d::CCPoint m_unkPoint30;
        float m_middleGroundOffsetY;
        int m_unkInt3;
        int m_unkInt4;
        bool m_unkBool4;
        bool m_unkBool5;
        float m_unkFloat2;
        float m_unkFloat3;
        int m_unkInt5;
        int m_unkInt6;
        int m_unkInt7;
        int m_unkInt8;
        int m_unkInt9;
        int m_unkInt10;
        int m_unkInt11;
        float m_unkFloat4;
        float m_unkUint1;
        float m_portalY;
        bool m_unkBool6;
        bool m_gravityRelated;
        int m_unkInt12;
        int m_unkInt13;
        int m_unkInt14;
        int m_unkInt15;
        bool m_unkBool7;
        bool m_unkBool8;
        bool m_unkBool9;
        float m_unkFloat5;
        float m_unkFloat6;
        float m_unkFloat7;
        float m_unkFloat8;
        float m_cameraAngle;
        float m_targetCameraAngle;
        bool m_playerStreakBlend;
        float m_timeWarp;
        float m_timeWarpRelated;
        int m_currentChannel;
        int m_rotateChannel;
        double m_totalTime;
        double m_levelTime;
        double m_unkDouble3;
        int m_unkUint2;
        float m_unkUint3;
        int m_currentProgress;
        float m_unkUint4;
        int m_unkUint5;
        float m_unkUint6;
        float m_unkUint7;
        GameObject* m_unkGameObjPtr1;
        GameObject* m_unkGameObjPtr2;
        cocos2d::CCPoint m_cameraPosition;
        bool m_unkBool10;
        float m_levelFlipping;
        bool m_unkBool11;
        bool m_unkBool12;
        bool m_isDualMode;
        float m_unkFloat9;
        int m_cameraEdgeValue0;
        int m_cameraEdgeValue1;
        int m_cameraEdgeValue2;
        int m_cameraEdgeValue3;
        float m_unkUint10;
        int m_unkUint11;
        int m_unkUint12;
        cocos2d::CCPoint m_cameraStepDiff;
        float m_unkFloat10;
        unsigned int m_timeModRelated;
        bool m_timeModRelated2;
        float m_unkUint13;
        cocos2d::CCPoint m_unkPoint32;
        cocos2d::CCPoint m_unkPoint33;
        bool m_unkBool20;
        bool m_unkBool21;
        bool m_unkBool22;
        float m_unkUint14;
        bool m_unkBool26;
        bool m_cameraShakeEnabled;
        float m_cameraShakeFactor;
        float m_unkUint15;
        float m_unkUint16;
        uint64_t m_unkUint64_1;
        cocos2d::CCPoint m_unkPoint34;
        unsigned int m_dualRelated;
        bool m_unkBool27;
        bool m_unkBool28;
        bool m_unkBool29;
        float m_unkUint17;
        bool m_unkBool30;
        int m_background;
        int m_ground;
        int m_middleground;
        bool m_unkBool31;
        int m_gamePoints;
        bool m_unkBool32;
        unsigned int m_pauseCounter;
        unsigned int m_pauseBufferTimer;

        //PlayLayer
        int m_unk36c8;
        bool m_unk36cc;
        bool m_unk36cd;
        bool m_unk36ce;
        bool m_unk36cf;
        geode::SeedValueRSV m_damageVerifiedIndex;
        bool m_damageVerified;
        bool m_passedIntegrity;
        int m_objectsCreated;
        int m_unk3768;
        bool m_platformerRestart;
        bool m_unk376d;
        bool m_isIgnoreDamageEnabled;
        float m_unk3778;
        int m_unk377c;
        float m_unk3780;
        float m_unk3784;
        int m_unk3788;
        int m_unk378c;
        bool m_endChecked;
        float m_endXPosition;
        CheckpointObject* m_currentCheckpoint;
        bool m_unk37b0;
        bool m_unk37b1;
        cocos2d::CCPoint m_enterEffectPosition;
        bool m_isSilent;
        int m_unk37cc;
        bool m_unk37e0;
        int m_pulseRodIndex;
        float m_maxObjectX;
        bool m_decimalPercentage;
        bool m_hintShown;
        float m_progressWidth;
        float m_progressHeight;
        int m_gravityEffectAmount;
        int m_gravityEffectsPlayed;
        int m_gravityEffectIndex;
        bool m_doNot;
        float m_unk383c;
        bool m_skipAudioStep;
        int m_jumps;
        bool m_hasJumped;
        int m_uncommittedJumps;
        bool m_showLeaderboardPercentage;
        bool m_hasCompletedLevel;
        bool m_inResetDelay;
        int m_lastAttemptPercent;
        bool m_endLayerStars;
        int m_orbs;
        int m_diamonds;
        bool m_secretKey;
        bool m_recordingStopped;
        double m_unk38b0;
        double m_unk38b8;
        double m_unk38c0;
        bool m_unk38c8;
        float m_unk38cc;
        int m_unk38d0;
        double m_attemptTime;
        double m_bestAttemptTime;
        double m_pauseTime;
        double m_currentTime;
        double m_pauseDelta;
        float m_unk3900;
        bool m_glitterEnabled;
        bool m_effectsDisabled;
        bool m_unk3906;
        bool m_isPaused;
        bool m_disableGravityEffect;
        cocos2d::CCPoint m_unk3918;
        cocos2d::CCPoint m_unk3920;
        DynamicBitset m_keyPulses;
        int m_nextColorKey;
        bool m_tryPlaceCheckpoint;
        CheckpointGameObject* m_activatedCheckpoint;
        bool m_musicPrepared;
        cocos2d::CCPoint m_endPosition;

        #ifndef GEODE_IS_ANDROID
        //GJBaseGameLayer
        gd::unordered_map<int, cocos2d::CCPoint> m_uiObjectPositions;
        gd::vector<GameObject*> m_unkdd8;
        gd::vector<GameObject*> m_disabledObjects;
        gd::vector<GameObject*> m_unke08;
        gd::vector<GameObject*> m_areaObjects;
        gd::vector<GameObject*> m_processedAreaObjects;
        gd::unordered_map<int, gd::vector<GameObject*>> m_visibilityGroups;
        gd::vector<GameObject*> m_visibleObjects;
        gd::vector<GameObject*> m_visibleObjects2;
        gd::unordered_map<int, std::pair<int, int>> m_targetGroups;
        gd::unordered_map<int, gd::vector<LabelGameObject*>> m_labelObjects;
        gd::unordered_map<int, gd::vector<LabelGameObject*>> m_timeLabelObjects;
        std::array<float, 2000> m_varianceValues;
        gd::vector<float> field_3058;
        gd::unordered_map<int, int> m_enterEasingIndices;
        gd::vector<GameObject*> m_solidCollisionObjects;
        gd::vector<GameObject*> m_hazardCollisionObjects;
        gd::vector<SequenceTriggerGameObject*> m_sequenceTriggers;
        gd::vector<PlayerButtonCommand> m_queuedButtons;
        gd::vector<PlayerButtonCommand> m_queuedRecordedButtons;
        gd::vector<PlayerButtonCommand> m_queuedReplayButtons;
        gd::vector<void*> m_unk3340;
        gd::vector<void*> m_unk3358;
        gd::vector<GameObject*> m_activeObjects;
        gd::vector<int> m_unk3388;
        gd::vector<int> m_unk33a0;
        gd::unordered_map<int, GameObject*> m_savePositionObjects;
        gd::unordered_map<int, int> m_savePositionValues;
        gd::string m_recordString;
        gd::string m_pointsString;

        //GameState
        gd::unordered_map<int, int> m_spawnChannelRelated0;
        gd::unordered_map<int, bool> m_spawnChannelRelated1;
        gd::unordered_map<int, GJValueTween> m_tweenActions;
        gd::unordered_map<int, gd::vector<int>> m_unkUMap8;
        gd::vector<AdvancedFollowInstance> m_advanceFollowInstances;
        gd::vector<DynamicObjectAction> m_dynamicObjActions1;
        gd::vector<DynamicObjectAction> m_dynamicObjActions2;
        gd::unordered_map<int, EnhancedGameObject*> m_stateObjects;
        gd::map<std::pair<GJGameEvent, int>, gd::vector<EventTriggerInstance>> m_unkMapPairGJGameEventIntVectorEventTriggerInstance;
        gd::map<std::pair<GJGameEvent, int>, int> m_unkMapPairGJGameEventIntInt;
        gd::vector<int> m_unkVecInt1;
        gd::vector<int> m_unkVecInt2;
        gd::unordered_set<int> m_unkUnorderedSet1;
        gd::map<std::pair<int, int>, int> m_unkMapPairIntIntInt;
        gd::unordered_map<int, GameObjectPhysics> m_gameObjectPhysics;
        gd::vector<float> m_unkVecFloat1;

        //PlayLayer
        gd::vector<GameObject*> m_dynamicSaveObjects;
        gd::vector<GameObject*> m_activeSaveObjects1;
        gd::vector<GameObject*> m_activeSaveObjects2;
        gd::vector<SavedObjectStateRef> m_dynamicSaveObjects2;
        gd::vector<gd::string> m_objectStrings;
        #endif
    };

    class FixPlayerCheckpoint {
    public:
        FixPlayerCheckpoint() = default;

        FixPlayerCheckpoint(PlayerObject* player) {
            m_wasTeleported = player->m_wasTeleported;
            m_fixGravityBug = player->m_fixGravityBug;
            m_reverseSync = player->m_reverseSync;
            m_yVelocityBeforeSlope = player->m_yVelocityBeforeSlope;
            m_dashX = player->m_dashX;
            m_dashY = player->m_dashY;
            m_dashAngle = player->m_dashAngle;
            m_dashStartTime = player->m_dashStartTime;
            m_slopeStartTime = player->m_slopeStartTime;
            m_justPlacedStreak = player->m_justPlacedStreak;
            m_maybeLastGroundObject = player->m_maybeLastGroundObject;
            m_lastCollisionBottom = player->m_lastCollisionBottom;
            m_lastCollisionTop = player->m_lastCollisionTop;
            m_lastCollisionLeft = player->m_lastCollisionLeft;
            m_lastCollisionRight = player->m_lastCollisionRight;
            m_unk50C = player->m_unk50C;
            m_unk510 = player->m_unk510;
            m_currentSlope2 = player->m_currentSlope2;
            m_preLastGroundObject = player->m_preLastGroundObject;
            m_slopeAngle = player->m_slopeAngle;
            m_slopeSlidingMaybeRotated = player->m_slopeSlidingMaybeRotated;
            m_quickCheckpointMode = player->m_quickCheckpointMode;
            m_collidedObject = player->m_collidedObject;
            m_lastGroundObject = player->m_lastGroundObject;
            m_collidingWithLeft = player->m_collidingWithLeft;
            m_collidingWithRight = player->m_collidingWithRight;
            m_maybeSavedPlayerFrame = player->m_maybeSavedPlayerFrame;
            m_scaleXRelated2 = player->m_scaleXRelated2;
            m_groundYVelocity = player->m_groundYVelocity;
            m_yVelocityRelated = player->m_yVelocityRelated;
            m_scaleXRelated3 = player->m_scaleXRelated3;
            m_scaleXRelated4 = player->m_scaleXRelated4;
            m_scaleXRelated5 = player->m_scaleXRelated5;
            m_isCollidingWithSlope = player->m_isCollidingWithSlope;
            m_isBallRotating = player->m_isBallRotating;
            m_unk669 = player->m_unk669;
            m_currentSlope3 = player->m_currentSlope3;
            m_currentSlope = player->m_currentSlope;
            unk_584 = player->unk_584;
            m_collidingWithSlopeId = player->m_collidingWithSlopeId;
            m_slopeFlipGravityRelated = player->m_slopeFlipGravityRelated;
            m_slopeAngleRadians = player->m_slopeAngleRadians;
            m_rotationSpeed = player->m_rotationSpeed;
            m_rotateSpeed = player->m_rotateSpeed;
            m_isRotating = player->m_isRotating;
            m_isBallRotating2 = player->m_isBallRotating2;
            m_hasGlow = player->m_hasGlow;
            m_isHidden = player->m_isHidden;
            m_ghostType = player->m_ghostType;
            m_speedMultiplier = player->m_speedMultiplier;
            m_yStart = player->m_yStart;
            m_gravity = player->m_gravity;
            m_trailingParticleLife = player->m_trailingParticleLife;
            m_unk648 = player->m_unk648;
            m_gameModeChangedTime = player->m_gameModeChangedTime;
            m_padRingRelated = player->m_padRingRelated;
            m_maybeReducedEffects = player->m_maybeReducedEffects;
            m_maybeIsFalling = player->m_maybeIsFalling;
            m_shouldTryPlacingCheckpoint = player->m_shouldTryPlacingCheckpoint;
            m_playEffects = player->m_playEffects;
            m_maybeCanRunIntoBlocks = player->m_maybeCanRunIntoBlocks;
            m_hasGroundParticles = player->m_hasGroundParticles;
            m_hasShipParticles = player->m_hasShipParticles;
            m_isOnGround3 = player->m_isOnGround3;
            m_checkpointTimeout = player->m_checkpointTimeout;
            m_lastCheckpointTime = player->m_lastCheckpointTime;
            m_lastJumpTime = player->m_lastJumpTime;
            m_lastFlipTime = player->m_lastFlipTime;
            m_flashTime = player->m_flashTime;
            m_flashRelated = player->m_flashRelated;
            m_flashRelated1 = player->m_flashRelated1;
            m_colorRelated2 = player->m_colorRelated2;
            m_flashRelated3 = player->m_flashRelated3;
            m_lastSpiderFlipTime = player->m_lastSpiderFlipTime;
            m_unkBool5 = player->m_unkBool5;
            m_maybeIsVehicleGlowing = player->m_maybeIsVehicleGlowing;
            m_gv0096 = player->m_gv0096;
            m_gv0100 = player->m_gv0100;
            m_accelerationOrSpeed = player->m_accelerationOrSpeed;
            m_snapDistance = player->m_snapDistance;
            m_ringJumpRelated = player->m_ringJumpRelated;
            m_objectSnappedTo = player->m_objectSnappedTo;
            m_pendingCheckpoint = player->m_pendingCheckpoint;
            m_onFlyCheckpointTries = player->m_onFlyCheckpointTries;
            m_maybeSpriteRelated = player->m_maybeSpriteRelated;
            m_useLandParticles0 = player->m_useLandParticles0;
            m_landParticlesAngle = player->m_landParticlesAngle;
            m_landParticleRelatedY = player->m_landParticleRelatedY;
            m_playerStreak = player->m_playerStreak;
            m_streakStrokeWidth = player->m_streakStrokeWidth;
            m_disableStreakTint = player->m_disableStreakTint;
            m_alwaysShowStreak = player->m_alwaysShowStreak;
            m_shipStreakType = player->m_shipStreakType;
            m_slopeRotation = player->m_slopeRotation;
            m_currentSlopeYVelocity = player->m_currentSlopeYVelocity;
            m_unk3d0 = player->m_unk3d0;
            m_blackOrbRelated = player->m_blackOrbRelated;
            m_unk3e0 = player->m_unk3e0;
            m_unk3e1 = player->m_unk3e1;
            m_isAccelerating = player->m_isAccelerating;
            m_isCurrentSlopeTop = player->m_isCurrentSlopeTop;
            m_collidedTopMinY = player->m_collidedTopMinY;
            m_collidedBottomMaxY = player->m_collidedBottomMaxY;
            m_collidedLeftMaxX = player->m_collidedLeftMaxX;
            m_collidedRightMinX = player->m_collidedRightMinX;
            m_fadeOutStreak = player->m_fadeOutStreak;
            // m_canPlaceCheckpoint =  m_canPlaceCheckpointckpoint; (breaking)
            m_colorRelated = player->m_colorRelated;
            m_secondColorRelated = player->m_secondColorRelated;
            m_hasCustomGlowColor = player->m_hasCustomGlowColor>m_hasCustomGlowColor;
            m_glowColor = player->m_glowColor;
            m_maybeIsColliding = player->m_maybeIsColliding;
            // m_jumpBuffered = player->m_jumpBuffered; (breaking)
            m_stateRingJump = player->m_stateRingJump;
            m_wasJumpBuffered = player->m_wasJumpBuffered;
            m_wasRobotJump = player->m_wasRobotJump;
            m_stateJumpBuffered = player->m_stateJumpBuffered;
            m_stateRingJump2 = player->m_stateRingJump2;
            m_touchedRing = player->m_touchedRing;
            m_touchedCustomRing = player->m_touchedCustomRing;
            m_touchedGravityPortal = player->m_touchedGravityPortal;
            m_maybeTouchedBreakableBlock = player->m_maybeTouchedBreakableBlock;
            m_jumpRelatedAC2 = player->m_jumpRelatedAC2;
            m_touchedPad = player->m_touchedPad;
            m_yVelocity = player->m_yVelocity;
            m_fallSpeed = player->m_fallSpeed;
            m_isOnSlope = player->m_isOnSlope;
            m_wasOnSlope = player->m_wasOnSlope;
            m_slopeVelocity = player->m_slopeVelocity;
            m_maybeUpsideDownSlope = player->m_maybeUpsideDownSlope;
            m_isShip = player->m_isShip;
            m_isBird = player->m_isBird;
            m_isBall = player->m_isBall;
            m_isDart = player->m_isDart;
            m_isRobot = player->m_isRobot;
            m_isSpider = player->m_isSpider;
            m_isUpsideDown = player->m_isUpsideDown;
            m_isDead = player->m_isDead;
            m_isOnGround = player->m_isOnGround;
            m_isGoingLeft = player->m_isGoingLeft;
            m_isSideways = player->m_isSideways;
            m_isSwing = player->m_isSwing;
            m_reverseRelated = player->m_reverseRelated;
            m_maybeReverseSpeed = player->m_maybeReverseSpeed;
            m_maybeReverseAcceleration = player->m_maybeReverseAcceleration;
            m_xVelocityRelated2 = player->m_xVelocityRelated2;
            m_isDashing = player->m_isDashing;
            m_unk9e8 = player->m_unk9e8;
            m_groundObjectMaterial = player->m_groundObjectMaterial;
            m_vehicleSize = player->m_vehicleSize;
            m_playerSpeed = player->m_playerSpeed;
            m_shipRotation = player->m_shipRotation;
            m_lastPortalPos = player->m_lastPortalPos;
            m_unkUnused3 = player->m_unkUnused3;
            m_isOnGround2 = player->m_isOnGround2;
            m_lastLandTime = player->m_lastLandTime;
            m_platformerVelocityRelated = player->m_platformerVelocityRelated;
            m_maybeIsBoosted = player->m_maybeIsBoosted;
            m_scaleXRelatedTime = player->m_scaleXRelatedTime;
            m_decreaseBoostSlide = player->m_decreaseBoostSlide;
            m_unkA29 = player->m_unkA29;
            m_isLocked = player->m_isLocked;
            m_controlsDisabled = player->m_controlsDisabled;
            m_lastGroundedPos = player->m_lastGroundedPos;
            m_lastActivatedPortal = player->m_lastActivatedPortal;
            m_hasEverJumped = player->m_hasEverJumped;
            m_hasEverHitRing = player->m_hasEverHitRing;
            m_playerColor1 = player->m_playerColor1;
            m_playerColor2 = player->m_playerColor2;
            m_isSecondPlayer = player->m_isSecondPlayer;
            m_unkA99 = player->m_unkA99;
            m_totalTime = player->m_totalTime;
            m_isBeingSpawnedByDualPortal = player->m_isBeingSpawnedByDualPortal;
            m_unkAAC = player->m_unkAAC;
            m_unkAngle1 = player->m_unkAngle1;
            m_yVelocityRelated3 = player->m_yVelocityRelated3;
            m_defaultMiniIcon = player->m_defaultMiniIcon;
            m_swapColors = player->m_swapColors;
            m_switchDashFireColor = player->m_switchDashFireColor;
            m_followRelated = player->m_followRelated;
            m_unk838 = player->m_unk838;
            m_stateOnGround = player->m_stateOnGround;
            m_stateUnk = player->m_stateUnk;
            m_stateNoStickX = player->m_stateNoStickX;
            m_stateNoStickY = player->m_stateNoStickY;
            m_stateUnk2 = player->m_stateUnk2;
            m_stateBoostX = player->m_stateBoostX;
            m_stateBoostY = player->m_stateBoostY;
            m_maybeStateForce2 = player->m_maybeStateForce2;
            m_stateScale = player->m_stateScale;
            m_platformerXVelocity = player->m_platformerXVelocity;
            m_holdingRight = player->m_holdingRight;
            m_holdingLeft = player->m_holdingLeft;
            m_leftPressedFirst = player->m_leftPressedFirst;
            m_scaleXRelated = player->m_scaleXRelated;
            m_maybeHasStopped = player->m_maybeHasStopped;
            m_xVelocityRelated = player->m_xVelocityRelated;
            m_maybeGoingCorrectSlopeDirection = player->m_maybeGoingCorrectSlopeDirection;
            m_isSliding = player->m_isSliding;
            m_maybeSlopeForce = player->m_maybeSlopeForce;
            m_isOnIce = player->m_isOnIce;
            m_physDeltaRelated = player->m_physDeltaRelated;
            m_isOnGround4 = player->m_isOnGround4;
            m_maybeSlidingTime = player->m_maybeSlidingTime;
            m_maybeSlidingStartTime = player->m_maybeSlidingStartTime;
            m_changedDirectionsTime = player->m_changedDirectionsTime;
            m_slopeEndTime = player->m_slopeEndTime;
            m_isMoving = player->m_isMoving;
            m_platformerMovingLeft = player->m_platformerMovingLeft;
            m_platformerMovingRight = player->m_platformerMovingRight;
            m_isSlidingRight = player->m_isSlidingRight;
            m_maybeChangedDirectionAngle = player->m_maybeChangedDirectionAngle;
            m_unkUnused2 = player->m_unkUnused2;
            m_isPlatformer = player->m_isPlatformer;
            m_stateNoAutoJump = player->m_stateNoAutoJump;
            m_stateDartSlide = player->m_stateDartSlide;
            m_stateHitHead = player->m_stateHitHead;
            m_stateFlipGravity = player->m_stateFlipGravity;
            m_gravityMod = player->m_gravityMod;
            m_stateForce = player->m_stateForce;
            m_stateForceVector = player->m_stateForceVector;
            m_affectedByForces = player->m_affectedByForces;
            m_somethingPlayerSpeedTime = player->m_somethingPlayerSpeedTime;
            m_playerSpeedAC = player->m_playerSpeedAC;
            m_fixRobotJump = player->m_fixRobotJump;
            // m_holdingButtons = player->m_holdingButtons; // map<int, bool>
            m_inputsLocked = player->m_inputsLocked;
            m_gv0123 = player->m_gv0123;
            m_iconRequestID = player->m_iconRequestID;
            m_unkUnused = player->m_unkUnused;
            m_isOutOfBounds = player->m_isOutOfBounds;
            m_fallStartY = player->m_fallStartY;
            m_disablePlayerSqueeze = player->m_disablePlayerSqueeze;
            m_robotHasRun3 = player->m_robotHasRun3;
            m_robotHasRun2 = player->m_robotHasRun2;
            m_item20 = player->m_item20;
            m_ignoreDamage = player->m_ignoreDamage;
            m_enable22Changes = player->m_enable22Changes;

            m_position = player->m_position;
            m_rotation = player->getRotation();

            #ifndef GEODE_IS_ANDROID

            m_rotateObjectsRelated = player->m_rotateObjectsRelated;     // unordered_map<int, GJPointDouble>
            m_maybeRotatedObjectsMap = player->m_maybeRotatedObjectsMap; // unordered_map<int, GameObject*>
            m_ringRelatedSet = player->m_ringRelatedSet;                 // unordered_set<int>
            m_touchedRings = player->m_touchedRings;                     // unordered_set<int>

            m_jumpPadRelated = player->m_jumpPadRelated;                 // map<int, bool>
            m_playerFollowFloats = player->m_playerFollowFloats;         // vector<float>

            m_currentRobotAnimation = player->m_currentRobotAnimation;

            for (int i = 0; i < player->m_touchingRings->count(); i++)
                m_touchingRings.push_back(player->m_touchingRings->objectAtIndex(i));

            #endif
        }

        void apply(PlayerObject* player) {
            if (!utils::get<PlayLayer>()->m_isPracticeMode) return;

            player->m_wasTeleported = m_wasTeleported;
            player->m_fixGravityBug = m_fixGravityBug;
            player->m_reverseSync = m_reverseSync;
            player->m_yVelocityBeforeSlope = m_yVelocityBeforeSlope;
            player->m_dashX = m_dashX;
            player->m_dashY = m_dashY;
            player->m_dashAngle = m_dashAngle;
            player->m_dashStartTime = m_dashStartTime;
            player->m_slopeStartTime = m_slopeStartTime;
            player->m_justPlacedStreak = m_justPlacedStreak;
            player->m_maybeLastGroundObject = m_maybeLastGroundObject;
            player->m_lastCollisionBottom = m_lastCollisionBottom;
            player->m_lastCollisionTop = m_lastCollisionTop;
            player->m_lastCollisionLeft = m_lastCollisionLeft;
            player->m_lastCollisionRight = m_lastCollisionRight;
            player->m_unk50C = m_unk50C;
            player->m_unk510 = m_unk510;
            player->m_currentSlope2 = m_currentSlope2;
            player->m_preLastGroundObject = m_preLastGroundObject;
            player->m_slopeAngle = m_slopeAngle;
            player->m_slopeSlidingMaybeRotated = m_slopeSlidingMaybeRotated;
            player->m_quickCheckpointMode = m_quickCheckpointMode;
            player->m_collidedObject = m_collidedObject;
            player->m_lastGroundObject = m_lastGroundObject;
            player->m_collidingWithLeft = m_collidingWithLeft;
            player->m_collidingWithRight = m_collidingWithRight;
            player->m_maybeSavedPlayerFrame = m_maybeSavedPlayerFrame;
            player->m_scaleXRelated2 = m_scaleXRelated2;
            player->m_groundYVelocity = m_groundYVelocity;
            player->m_yVelocityRelated = m_yVelocityRelated;
            player->m_scaleXRelated3 = m_scaleXRelated3;
            player->m_scaleXRelated4 = m_scaleXRelated4;
            player->m_scaleXRelated5 = m_scaleXRelated5;
            player->m_isCollidingWithSlope = m_isCollidingWithSlope;
            player->m_isBallRotating = m_isBallRotating;
            player->m_unk669 = m_unk669;
            player->m_currentSlope3 = m_currentSlope3;
            player->m_currentSlope = m_currentSlope;
            player->unk_584 = unk_584;
            player->m_collidingWithSlopeId = m_collidingWithSlopeId;
            player->m_slopeFlipGravityRelated = m_slopeFlipGravityRelated;
            player->m_slopeAngleRadians = m_slopeAngleRadians;
            player->m_rotationSpeed = m_rotationSpeed;
            player->m_rotateSpeed = m_rotateSpeed;
            player->m_isRotating = m_isRotating;
            player->m_isBallRotating2 = m_isBallRotating2;
            player->m_hasGlow = m_hasGlow;
            player->m_isHidden = m_isHidden;
            player->m_ghostType = m_ghostType;
            player->m_speedMultiplier = m_speedMultiplier;
            player->m_yStart = m_yStart;
            player->m_gravity = m_gravity;
            player->m_trailingParticleLife = m_trailingParticleLife;
            player->m_unk648 = m_unk648;
            player->m_gameModeChangedTime = m_gameModeChangedTime;
            player->m_padRingRelated = m_padRingRelated;
            player->m_maybeReducedEffects = m_maybeReducedEffects;
            player->m_maybeIsFalling = m_maybeIsFalling;
            player->m_shouldTryPlacingCheckpoint = m_shouldTryPlacingCheckpoint;
            player->m_playEffects = m_playEffects;
            player->m_maybeCanRunIntoBlocks = m_maybeCanRunIntoBlocks;
            player->m_hasGroundParticles = m_hasGroundParticles;
            player->m_hasShipParticles = m_hasShipParticles;
            player->m_isOnGround3 = m_isOnGround3;
            player->m_checkpointTimeout = m_checkpointTimeout;
            player->m_lastCheckpointTime = m_lastCheckpointTime;
            player->m_lastJumpTime = m_lastJumpTime;
            player->m_lastFlipTime = m_lastFlipTime;
            player->m_flashTime = m_flashTime;
            player->m_flashRelated = m_flashRelated;
            player->m_flashRelated1 = m_flashRelated1;
            player->m_colorRelated2 = m_colorRelated2;
            player->m_flashRelated3 = m_flashRelated3;
            player->m_lastSpiderFlipTime = m_lastSpiderFlipTime;
            player->m_unkBool5 = m_unkBool5;
            player->m_maybeIsVehicleGlowing = m_maybeIsVehicleGlowing;
            player->m_gv0096 = m_gv0096;
            player->m_gv0100 = m_gv0100;
            player->m_accelerationOrSpeed = m_accelerationOrSpeed;
            player->m_snapDistance = m_snapDistance;
            player->m_ringJumpRelated = m_ringJumpRelated;
            player->m_objectSnappedTo = m_objectSnappedTo;
            player->m_pendingCheckpoint = m_pendingCheckpoint;
            player->m_onFlyCheckpointTries = m_onFlyCheckpointTries;
            player->m_maybeSpriteRelated = m_maybeSpriteRelated;
            player->m_useLandParticles0 = m_useLandParticles0;
            player->m_landParticlesAngle = m_landParticlesAngle;
            player->m_landParticleRelatedY = m_landParticleRelatedY;
            player->m_playerStreak = m_playerStreak;
            player->m_streakStrokeWidth = m_streakStrokeWidth;
            player->m_disableStreakTint = m_disableStreakTint;
            player->m_alwaysShowStreak = m_alwaysShowStreak;
            player->m_shipStreakType = m_shipStreakType;
            player->m_slopeRotation = m_slopeRotation;
            player->m_currentSlopeYVelocity = m_currentSlopeYVelocity;
            player->m_unk3d0 = m_unk3d0;
            player->m_blackOrbRelated = m_blackOrbRelated;
            player->m_unk3e0 = m_unk3e0;
            player->m_unk3e1 = m_unk3e1;
            player->m_isAccelerating = m_isAccelerating;
            player->m_isCurrentSlopeTop = m_isCurrentSlopeTop;
            player->m_collidedTopMinY = m_collidedTopMinY;
            player->m_collidedBottomMaxY = m_collidedBottomMaxY;
            player->m_collidedLeftMaxX = m_collidedLeftMaxX;
            player->m_collidedRightMinX = m_collidedRightMinX;
            player->m_fadeOutStreak = m_fadeOutStreak;
            // player->m_canPlaceCheckpoint = m_canPlaceCheckpoint; (breaking)
            player->m_colorRelated = m_colorRelated;
            player->m_secondColorRelated = m_secondColorRelated;
            player->m_hasCustomGlowColor = m_hasCustomGlowColor;
            player->m_glowColor = m_glowColor;
            player->m_maybeIsColliding = m_maybeIsColliding;
            // player->m_jumpBuffered = m_jumpBuffered; (breaking)
            player->m_stateRingJump = m_stateRingJump;
            player->m_wasJumpBuffered = m_wasJumpBuffered;
            player->m_wasRobotJump = m_wasRobotJump;
            player->m_stateJumpBuffered = m_stateJumpBuffered;
            player->m_stateRingJump2 = m_stateRingJump2;
            player->m_touchedRing = m_touchedRing;
            player->m_touchedCustomRing = m_touchedCustomRing;
            player->m_touchedGravityPortal = m_touchedGravityPortal;
            player->m_maybeTouchedBreakableBlock = m_maybeTouchedBreakableBlock;
            player->m_jumpRelatedAC2 = m_jumpRelatedAC2;
            player->m_touchedPad = m_touchedPad;
            player->m_yVelocity = m_yVelocity;
            player->m_fallSpeed = m_fallSpeed;
            player->m_isOnSlope = m_isOnSlope;
            player->m_wasOnSlope = m_wasOnSlope;
            player->m_slopeVelocity = m_slopeVelocity;
            player->m_maybeUpsideDownSlope = m_maybeUpsideDownSlope;
            player->m_isShip = m_isShip;
            player->m_isBird = m_isBird;
            player->m_isBall = m_isBall;
            player->m_isDart = m_isDart;
            player->m_isRobot = m_isRobot;
            player->m_isSpider = m_isSpider;
            player->m_isUpsideDown = m_isUpsideDown;
            player->m_isDead = m_isDead;
            player->m_isOnGround = m_isOnGround;
            player->m_isGoingLeft = m_isGoingLeft;
            player->m_isSideways = m_isSideways;
            player->m_isSwing = m_isSwing;
            player->m_reverseRelated = m_reverseRelated;
            player->m_maybeReverseSpeed = m_maybeReverseSpeed;
            player->m_maybeReverseAcceleration = m_maybeReverseAcceleration;
            player->m_xVelocityRelated2 = m_xVelocityRelated2;
            player->m_isDashing = m_isDashing;
            player->m_unk9e8 = m_unk9e8;
            player->m_groundObjectMaterial = m_groundObjectMaterial;
            player->m_vehicleSize = m_vehicleSize;
            player->m_playerSpeed = m_playerSpeed;
            player->m_shipRotation = m_shipRotation;
            player->m_lastPortalPos = m_lastPortalPos;
            player->m_unkUnused3 = m_unkUnused3;
            player->m_isOnGround2 = m_isOnGround2;
            player->m_lastLandTime = m_lastLandTime;
            player->m_platformerVelocityRelated = m_platformerVelocityRelated;
            player->m_maybeIsBoosted = m_maybeIsBoosted;
            player->m_scaleXRelatedTime = m_scaleXRelatedTime;
            player->m_decreaseBoostSlide = m_decreaseBoostSlide;
            player->m_unkA29 = m_unkA29;
            player->m_isLocked = m_isLocked;
            player->m_controlsDisabled = m_controlsDisabled;
            player->m_lastGroundedPos = m_lastGroundedPos;
            player->m_lastActivatedPortal = m_lastActivatedPortal;
            player->m_hasEverJumped = m_hasEverJumped;
            player->m_hasEverHitRing = m_hasEverHitRing;
            player->m_playerColor1 = m_playerColor1;
            player->m_playerColor2 = m_playerColor2;
            player->m_isSecondPlayer = m_isSecondPlayer;
            player->m_unkA99 = m_unkA99;
            player->m_totalTime = m_totalTime;
            player->m_isBeingSpawnedByDualPortal = m_isBeingSpawnedByDualPortal;
            player->m_unkAAC = m_unkAAC;
            player->m_unkAngle1 = m_unkAngle1;
            player->m_yVelocityRelated3 = m_yVelocityRelated3;
            player->m_defaultMiniIcon = m_defaultMiniIcon;
            player->m_swapColors = m_swapColors;
            player->m_switchDashFireColor = m_switchDashFireColor;
            player->m_followRelated = m_followRelated;
            player->m_unk838 = m_unk838;
            player->m_stateOnGround = m_stateOnGround;
            player->m_stateUnk = m_stateUnk;
            player->m_stateNoStickX = m_stateNoStickX;
            player->m_stateNoStickY = m_stateNoStickY;
            player->m_stateUnk2 = m_stateUnk2;
            player->m_stateBoostX = m_stateBoostX;
            player->m_stateBoostY = m_stateBoostY;
            player->m_maybeStateForce2 = m_maybeStateForce2;
            player->m_stateScale = m_stateScale;
            player->m_platformerXVelocity = m_platformerXVelocity;
            player->m_holdingRight = m_holdingRight;
            player->m_holdingLeft = m_holdingLeft;
            player->m_leftPressedFirst = m_leftPressedFirst;
            player->m_scaleXRelated = m_scaleXRelated;
            player->m_maybeHasStopped = m_maybeHasStopped;
            player->m_xVelocityRelated = m_xVelocityRelated;
            player->m_maybeGoingCorrectSlopeDirection = m_maybeGoingCorrectSlopeDirection;
            player->m_isSliding = m_isSliding;
            player->m_maybeSlopeForce = m_maybeSlopeForce;
            player->m_isOnIce = m_isOnIce;
            player->m_physDeltaRelated = m_physDeltaRelated;
            player->m_isOnGround4 = m_isOnGround4;
            player->m_maybeSlidingTime = m_maybeSlidingTime;
            player->m_maybeSlidingStartTime = m_maybeSlidingStartTime;
            player->m_changedDirectionsTime = m_changedDirectionsTime;
            player->m_slopeEndTime = m_slopeEndTime;
            player->m_isMoving = m_isMoving;
            player->m_platformerMovingLeft = m_platformerMovingLeft;
            player->m_platformerMovingRight = m_platformerMovingRight;
            player->m_isSlidingRight = m_isSlidingRight;
            player->m_maybeChangedDirectionAngle = m_maybeChangedDirectionAngle;
            player->m_unkUnused2 = m_unkUnused2;
            player->m_isPlatformer = m_isPlatformer;
            player->m_stateNoAutoJump = m_stateNoAutoJump;
            player->m_stateDartSlide = m_stateDartSlide;
            player->m_stateHitHead = m_stateHitHead;
            player->m_stateFlipGravity = m_stateFlipGravity;
            player->m_gravityMod = m_gravityMod;
            player->m_stateForce = m_stateForce;
            player->m_stateForceVector = m_stateForceVector;
            player->m_affectedByForces = m_affectedByForces;
            player->m_somethingPlayerSpeedTime = m_somethingPlayerSpeedTime;
            player->m_playerSpeedAC = m_playerSpeedAC;
            player->m_fixRobotJump = m_fixRobotJump;
            player->m_inputsLocked = m_inputsLocked;
            player->m_gv0123 = m_gv0123;
            player->m_iconRequestID = m_iconRequestID;
            player->m_unkUnused = m_unkUnused;
            player->m_isOutOfBounds = m_isOutOfBounds;
            player->m_fallStartY = m_fallStartY;
            player->m_disablePlayerSqueeze = m_disablePlayerSqueeze;
            player->m_robotHasRun3 = m_robotHasRun3;
            player->m_robotHasRun2 = m_robotHasRun2;
            player->m_item20 = m_item20;
            player->m_ignoreDamage = m_ignoreDamage;
            player->m_enable22Changes = m_enable22Changes;

            player->m_position = m_position;
            player->setPosition(m_position);
            player->setRotation(m_rotation);

            #ifndef GEODE_IS_ANDROID

            player->m_rotateObjectsRelated = m_rotateObjectsRelated;
            player->m_maybeRotatedObjectsMap = m_maybeRotatedObjectsMap;
            player->m_ringRelatedSet = m_ringRelatedSet;
            player->m_touchedRings = m_touchedRings;

            player->m_jumpPadRelated = m_jumpPadRelated;
            player->m_playerFollowFloats = m_playerFollowFloats;

            player->m_currentRobotAnimation = m_currentRobotAnimation;

            player->m_touchingRings->removeAllObjects();
            for (CCObject* obj : m_touchingRings)
                player->m_touchingRings->addObject(obj);

            #endif
        }

    private:
        cocos2d::CCPoint m_position;
        float m_rotation;

        bool m_wasTeleported;
        bool m_fixGravityBug;
        bool m_reverseSync;
        double m_yVelocityBeforeSlope;
        double m_dashX;
        double m_dashY;
        double m_dashAngle;
        double m_dashStartTime;
        double m_slopeStartTime;
        bool m_justPlacedStreak;
        GameObject* m_maybeLastGroundObject;
        int m_lastCollisionBottom;
        int m_lastCollisionTop;
        int m_lastCollisionLeft;
        int m_lastCollisionRight;
        int m_unk50C;
        int m_unk510;
        GameObject* m_currentSlope2;
        GameObject* m_preLastGroundObject;
        float m_slopeAngle;
        bool m_slopeSlidingMaybeRotated;
        bool m_quickCheckpointMode;
        GameObject* m_collidedObject;
        GameObject* m_lastGroundObject;
        GameObject* m_collidingWithLeft;
        GameObject* m_collidingWithRight;
        int m_maybeSavedPlayerFrame;
        double m_scaleXRelated2;
        double m_groundYVelocity;
        double m_yVelocityRelated;
        double m_scaleXRelated3;
        double m_scaleXRelated4;
        double m_scaleXRelated5;
        bool m_isCollidingWithSlope;
        bool m_isBallRotating;
        bool m_unk669;
        GameObject* m_currentSlope3;
        GameObject* m_currentSlope;
        double unk_584;
        int m_collidingWithSlopeId;
        bool m_slopeFlipGravityRelated;
        float m_slopeAngleRadians;
        float m_rotationSpeed;
        float m_rotateSpeed;
        bool m_isRotating;
        bool m_isBallRotating2;
        bool m_hasGlow;
        bool m_isHidden;
        GhostType m_ghostType;
        double m_speedMultiplier;
        double m_yStart;
        double m_gravity;
        float m_trailingParticleLife;
        float m_unk648;
        double m_gameModeChangedTime;
        bool m_padRingRelated;
        bool m_maybeReducedEffects;
        bool m_maybeIsFalling;
        bool m_shouldTryPlacingCheckpoint;
        bool m_playEffects;
        bool m_maybeCanRunIntoBlocks;
        bool m_hasGroundParticles;
        bool m_hasShipParticles;
        bool m_isOnGround3;
        bool m_checkpointTimeout;
        double m_lastCheckpointTime;
        double m_lastJumpTime;
        double m_lastFlipTime;
        double m_flashTime;
        float m_flashRelated;
        float m_flashRelated1;
        cocos2d::ccColor3B m_colorRelated2;
        cocos2d::ccColor3B m_flashRelated3;
        double m_lastSpiderFlipTime;
        bool m_unkBool5;
        bool m_maybeIsVehicleGlowing;
        bool m_gv0096;
        bool m_gv0100;
        double m_accelerationOrSpeed;
        double m_snapDistance;
        bool m_ringJumpRelated;
        GameObject* m_objectSnappedTo;
        CheckpointObject* m_pendingCheckpoint;
        int m_onFlyCheckpointTries;
        bool m_maybeSpriteRelated;
        bool m_useLandParticles0;
        float m_landParticlesAngle;
        float m_landParticleRelatedY;
        int m_playerStreak;
        float m_streakStrokeWidth;
        bool m_disableStreakTint;
        bool m_alwaysShowStreak;
        ShipStreak m_shipStreakType;
        double m_slopeRotation;
        double m_currentSlopeYVelocity;
        double m_unk3d0;
        double m_blackOrbRelated;
        bool m_unk3e0;
        bool m_unk3e1;
        bool m_isAccelerating;
        bool m_isCurrentSlopeTop;
        double m_collidedTopMinY;
        double m_collidedBottomMaxY;
        double m_collidedLeftMaxX;
        double m_collidedRightMinX;
        bool m_fadeOutStreak;
        // bool m_canPlaceCheckpoint; (breaking)
        cocos2d::ccColor3B m_colorRelated;
        cocos2d::ccColor3B m_secondColorRelated;
        bool m_hasCustomGlowColor;
        cocos2d::ccColor3B m_glowColor;
        bool m_maybeIsColliding;
        // bool m_jumpBuffered; (breaking)
        bool m_stateRingJump;
        bool m_wasJumpBuffered;
        bool m_wasRobotJump;
        unsigned char m_stateJumpBuffered;
        bool m_stateRingJump2;
        bool m_touchedRing;
        bool m_touchedCustomRing;
        bool m_touchedGravityPortal;
        bool m_maybeTouchedBreakableBlock;
        geode::SeedValueRSV m_jumpRelatedAC2;
        bool m_touchedPad;
        double m_yVelocity;
        double m_fallSpeed;
        bool m_isOnSlope;
        bool m_wasOnSlope;
        float m_slopeVelocity;
        bool m_maybeUpsideDownSlope;
        bool m_isShip;
        bool m_isBird;
        bool m_isBall;
        bool m_isDart;
        bool m_isRobot;
        bool m_isSpider;
        bool m_isUpsideDown;
        bool m_isDead;
        bool m_isOnGround;
        bool m_isGoingLeft;
        bool m_isSideways;
        bool m_isSwing;
        int m_reverseRelated;
        double m_maybeReverseSpeed;
        double m_maybeReverseAcceleration;
        float m_xVelocityRelated2;
        bool m_isDashing;
        int m_unk9e8;
        int m_groundObjectMaterial;
        float m_vehicleSize;
        float m_playerSpeed;
        cocos2d::CCPoint m_shipRotation;
        cocos2d::CCPoint m_lastPortalPos;
        float m_unkUnused3;
        bool m_isOnGround2;
        double m_lastLandTime;
        float m_platformerVelocityRelated;
        bool m_maybeIsBoosted;
        double m_scaleXRelatedTime;
        bool m_decreaseBoostSlide;
        bool m_unkA29;
        bool m_isLocked;
        bool m_controlsDisabled;
        cocos2d::CCPoint m_lastGroundedPos;
        GameObject* m_lastActivatedPortal;
        bool m_hasEverJumped;
        bool m_hasEverHitRing;
        cocos2d::ccColor3B m_playerColor1;
        cocos2d::ccColor3B m_playerColor2;
        bool m_isSecondPlayer;
        bool m_unkA99;
        double m_totalTime;
        bool m_isBeingSpawnedByDualPortal;
        float m_unkAAC;
        float m_unkAngle1;
        float m_yVelocityRelated3;
        bool m_defaultMiniIcon;
        bool m_swapColors;
        bool m_switchDashFireColor;
        int m_followRelated;
        float m_unk838;
        int m_stateOnGround;
        unsigned char m_stateUnk;
        unsigned char m_stateNoStickX;
        unsigned char m_stateNoStickY;
        unsigned char m_stateUnk2;
        int m_stateBoostX;
        int m_stateBoostY;
        int m_maybeStateForce2;
        int m_stateScale;
        double m_platformerXVelocity;
        bool m_holdingRight;
        bool m_holdingLeft;
        bool m_leftPressedFirst;
        double m_scaleXRelated;
        bool m_maybeHasStopped;
        float m_xVelocityRelated;
        bool m_maybeGoingCorrectSlopeDirection;
        bool m_isSliding;
        double m_maybeSlopeForce;
        bool m_isOnIce;
        double m_physDeltaRelated;
        bool m_isOnGround4;
        int m_maybeSlidingTime;
        double m_maybeSlidingStartTime;
        double m_changedDirectionsTime;
        double m_slopeEndTime;
        bool m_isMoving;
        bool m_platformerMovingLeft;
        bool m_platformerMovingRight;
        bool m_isSlidingRight;
        double m_maybeChangedDirectionAngle;
        double m_unkUnused2;
        bool m_isPlatformer;
        int m_stateNoAutoJump;
        int m_stateDartSlide;
        int m_stateHitHead;
        int m_stateFlipGravity;
        float m_gravityMod;
        int m_stateForce;
        cocos2d::CCPoint m_stateForceVector;
        bool m_affectedByForces;
        float m_somethingPlayerSpeedTime;
        float m_playerSpeedAC;
        bool m_fixRobotJump;
        // gd::map<int, bool> m_holdingButtons; (breaking)
        bool m_inputsLocked;
        bool m_gv0123;
        int m_iconRequestID;
        int m_unkUnused;
        bool m_isOutOfBounds;
        float m_fallStartY;
        bool m_disablePlayerSqueeze;
        bool m_robotHasRun3;
        bool m_robotHasRun2;
        bool m_item20;
        bool m_ignoreDamage;
        bool m_enable22Changes;

        // these dont work well on android
        // (P.S. robtop pls update NDK)
        #ifndef GEODE_IS_ANDROID
        std::unordered_map<int, GJPointDouble> m_rotateObjectsRelated;
        std::unordered_map<int, GameObject*> m_maybeRotatedObjectsMap;
        std::unordered_set<int> m_ringRelatedSet;
        std::unordered_set<int> m_touchedRings;
        std::map<int, bool> m_jumpPadRelated;
        std::vector<float> m_playerFollowFloats;
        std::vector<CCObject*> m_touchingRings;
        std::string m_currentRobotAnimation;
        #endif
    };
}
